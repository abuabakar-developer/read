books/ts

import axios from 'axios';

export default async function handler(req, res) {
  const { category, title, author } = req.query;

  // Build the query string dynamically based on available parameters
  let query = '';

  if (title) {
    query += `intitle:${encodeURIComponent(title)}`;  // Search by title, URL-encoded
  }
  if (author) {
    query += (query ? '+' : '') + `inauthor:${encodeURIComponent(author)}`;  // Search by author, URL-encoded, and add '+' if other queries exist
  }
  if (!query) {
    query = category ? encodeURIComponent(category) : 'fiction';  // Default to 'fiction' if no specific query is provided
  }

  const googleBooksUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;

  try {
    const response = await axios.get(googleBooksUrl);
    res.status(200).json(response.data);
  } catch (error) {
    console.error('Error fetching books from Google Books API:', error.response?.data || error.message);
    res.status(500).json({ message: 'Failed to fetch books', error: error.response?.data || error.message });
  }
}













/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['books.google.com', 'books.googleusercontent.com'], // Allow Google Books image domains
  },
  webpack: (config, { isServer }) => {
    // Add fallbacks for Node modules that are only available on the server-side
    config.resolve.fallback = {
      ...config.resolve.fallback,
      net: false,
      tls: false,
      fs: false,
      'fs/promises': false,
      child_process: false,
      dns: false,
      'timers/promises': false,
      '@mongodb-js/zstd': false, // Exclude zstd module
      '@napi-rs/snappy': false, // Exclude snappy module
    };

    return config;
  },
};

export default nextConfig;















'use client';
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import CheckoutButton from "@/app/components/CheckoutButton";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaChevronUp, FaHeart, FaPlus, FaMinus } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";

interface Book {
  id: string;
  title: string;
  description: string;
  cover_url: string;
  author_name: string[];
  published_year: string;
  price: number;
  discounted_price: number;
  pages: number;
}


export default function BookDetails() {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [showProductDetails, setShowProductDetails] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id]);

  const fetchBookDetails = async (bookId) => {
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      const data = await response.json();
      setBook(mapBookData(data));
    } catch (error) {
      console.error("Failed to fetch book details:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });

  const fetchReviews = async () => {
    try {
      const response = await fetch(`/api/reviews?bookId=${id}`);
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  };

  const calculateAverageRating = (reviews) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
    setTotalReviews(reviews.length);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.title || item.name} {/* Showing book title or list name */}
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
          <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
            <img
              src={book.cover_url}
              alt={book.title}
              className="w-full h-full object-cover transition-transform duration-300 transform group-hover:scale-105"
            />
          </div>
        </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>
  <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-4 rounded-3xl shadow-2xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-4">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">{averageRating.toFixed(1)} out of 5</span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">({totalReviews} reviews)</span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-6 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>
  
  {/* Review Modal */}
  {isReviewModalOpen && (
    <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)} />
  )}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">${book.price}</span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-green-400 to-green-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-green-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-green-500 hover:to-green-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    {isAddedToCart ? "Added to Cart" : "Add to Cart"}
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-red-300 ${
      isAddedToWishlist ? "bg-gray-400 cursor-not-allowed" : "bg-gradient-to-r from-red-500 to-red-700 hover:from-red-600 hover:to-red-800"
    } text-white`}
    disabled={isAddedToWishlist}
  >
    <FaHeart className="inline-block mr-2" /> {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
  </button>
    </div>

          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you're seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you'll be captivated by the author's ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}












import Image from 'next/image'

const HeroSection = () => {
  return (
    <section className="bg-gradient-to-r from-gray-50 to-gray-100 py-16 md:py-24 lg:py-32">
      <div className="container mx-auto flex flex-col md:flex-row items-center justify-between px-4 lg:px-8">
        {/* Text Content */}
        <div className="w-full md:w-1/2 text-center md:text-left mb-8 md:mb-0">
          <h1 className="font-poppins text-4xl lg:text-7xl font-extrabold text-green-800 leading-tight mb-4 tracking-wide">
            Discover Your Next Favorite Book
          </h1>
          <p className="font-cinzel text-lg lg:text-2xl text-green-700 mb-6">
  Dive into a world of books with endless possibilities. Browse our collection and find your next adventure!
</p>

          <div className="flex justify-center md:justify-start">
            <a href="#explore-books" className="bg-green-700 text-white py-3 px-6 rounded-lg font-semibold text-lg hover:bg-green-800 transition-all duration-300 mr-4 shadow-md hover:shadow-lg">
              Browse Books
            </a>
            <a href="#featured" className="bg-white text-green-700 border-2 border-green-700 py-3 px-6 rounded-lg font-semibold text-lg hover:bg-green-50 transition-all duration-300 shadow-md hover:shadow-lg">
              Get Started
            </a>
          </div>
        </div>
        
        {/* Image Section */}
        <div className="w-full md:w-1/2 flex justify-center">
          <Image
            src="/ab.webp" // Ensure you have this image in your public folder
            alt="Light Green Theme Hero Image"
            width={500} // Increased width for better visual impact
            height={500} // Adjust height to maintain aspect ratio
            className="rounded-lg shadow-lg transform hover:scale-110 transition-transform duration-300"
          />
        </div>
      </div>
    </section>
  )
}

export default HeroSection;








'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { AiOutlineSearch, AiOutlineShoppingCart, AiOutlineUser, AiOutlineHeart, AiOutlineDown, AiOutlineMenu, AiOutlineClose, AiOutlineHistory, AiOutlineLogout} from 'react-icons/ai';
import AuthModal from './AuthModal'; // Ensure this path is correct
import { useRouter } from 'next/navigation';
import { useCart } from '../context/CartContext';
import CartPage from '../cart/page';

interface NavbarProps {
  onSearch: (searchTerm: string) => void;
  onCategorySelect: (category: string) => void;
}

const Navbar: React.FC<NavbarProps> = ({ onSearch, onCategorySelect }) => {
  const router = useRouter();
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [userName, setUserName] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [wishlistCount, setWishlistCount] = useState(0);
  const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);
  const [isDashboardOpen, setIsDashboardOpen] = useState(false);
  const { totalItems } = useCart();
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [hasNewOrder, setHasNewOrder] = useState(false);

  const categories = [
    'Fiction',
    'Novel',
    "kids",
    'Romance',
    'Mystery',
    'Biography',
    'Art',
    'Games',
    "Children's",
    'Stationery & Gifts',
    'Science Fiction',
    "Our Favirotes",
  ];

  useEffect(() => {
    setIsClient(true);
    const token = localStorage.getItem('jwtToken');
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      setUserName(decodedToken.name);
    }

    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlistCount(storedWishlist.length);
  }, [router]);

  const closeAuthModal = () => setAuthModalOpen(false);
   
  useEffect(() => {
    const checkNewOrder = async () => {
      const response = await fetch('/api/get-order-details');
      const data = await response.json();
      setHasNewOrder(data.newOrder);
    };
    checkNewOrder();
  }, []);

  const handleSignOut = async () => {
    localStorage.removeItem('jwtToken');
    setUserName(null);
    router.push('/');
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      onSearch(searchTerm);
      navigateToExploreBooks();
      resetSearch();
    }
  };

  const resetSearch = () => setSearchTerm('');

  const navigateToExploreBooks = () => {
    const exploreSection = document.getElementById('explore-books');
    if (exploreSection) {
      const sectionPosition = exploreSection.getBoundingClientRect().top + window.scrollY;
      window.scrollTo({ top: sectionPosition - 140, behavior: 'smooth' });
    }
  };

  const handleViewWishlist = () => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      router.push('/wishlist');
    } else {
      alert('You need to be authenticated to view your wishlist.');
      setAuthModalOpen(true);
    }
  };

  const toggleAuthModal = () => setAuthModalOpen((prev) => !prev);

  const handleCategorySelect = (category: string) => {
    onCategorySelect(category);
    navigateToExploreBooks();
    setIsCategoriesOpen(false);
  };

  const toggleCart = () => setIsCartOpen((prev) => !prev); 

  const toggleDashboard = () => setIsDashboardOpen((prev) => !prev);

  if (!isClient) return null;

  return (
    <>
             
      {/* Upper Navbar - visible on larger screens */}
      <nav className="bg-gray-50 border-b border-green-300 fixed w-full top-0 z-50 shadow-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            
    <Link href="/" className="text-gray-900 text-2xl font-bold tracking-wide ml-6 hover:text-green-500">
    AbReads
    </Link>
  

            {/* Search Bar - visible on larger screens */}
            <form
  onSubmit={handleSearch}
  className="hidden lg:flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-3 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>

       {/* Right Icons */}
       <div className="flex items-center space-x-4">
  <button onClick={toggleCart} className="relative text-gray-900 hover:text-green-600">
    <AiOutlineShoppingCart className="text-2xl" />
    {totalItems > 0 && (
      <span className="absolute -top-2 -right-2 inline-block w-5 h-5 text-center bg-green-500 text-white rounded-full text-xs">
        {totalItems}
      </span>
    )}
  </button>

              <div className="flex items-center space-x-4 flex-row-reverse">
            {userName && (
        <button
      onClick={toggleDashboard}
      className="text-gray-900 hover:text-green-500 transition"
       >
      <p className='h-6 font-medium w-6 ml-2 mr-8 text-green-600 border-b border-green-700'>Account</p>
     </button>
      )}
      </div>
              {userName ? (
                <button onClick={handleSignOut} className="text-gray-900 hover:text-green-500 transition flex items-center">
                  <AiOutlineUser className="h-6 w-6" />
                  <span className="ml-1">Logout</span>
                </button>
              ) : (
                <button onClick={toggleAuthModal} className="text-gray-900 hover:text-green-500 transition">
                  <AiOutlineUser className="h-6 w-6" />
                </button>
              )}
              {/* Wishlist */}
              <button
                onClick={handleViewWishlist}
                className="relative py-1 px-4 group transition-colors duration-300 rounded-r-xl"
              >
                <span className="group-hover:text-green-600 text-gray-700 flex items-center">
                  <AiOutlineHeart className="mr-1" />
                  Wishlist
                  {wishlistCount > 0 && (
                    <span className="absolute top-0 right-0 bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-sm">
                      {wishlistCount}
                    </span>
                  )}
                </span>
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Lower Navbar - always visible */}
{/* Lower Navbar - always visible */}
<nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-2 px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center"
        >
          📚 <span className="ml-2">Categories</span>
          <AiOutlineDown
            className={`ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}`}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

{/* Categories visible on large screens */}
<div className="hidden lg:flex space-x-6">
  {categories.map((category, index) => (
    <button
      key={category}
      onClick={() => handleCategorySelect(category)}
      className={`py-2 px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
        ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''}`}
    >
      {category}
    </button>
  ))}
</div>
 </div>

{/* Search Bar - visible on smaller screens */}
<form
  onSubmit={handleSearch}
  className="lg:hidden flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>
  </div>
</nav>

<aside
  className={`fixed inset-y-0 left-0 w-64 bg-gradient-to-b from-green-50 via-green-100 to-green-200 shadow-2xl z-50 transition-transform duration-300 ease-in-out
    ${isDashboardOpen ? 'transform translate-x-0' : 'transform -translate-x-full'}
    `}
>
  <div className="flex flex-col p-8 space-y-4 relative">
    {/* Close Icon - Only for small screens */}
    <button
      onClick={toggleDashboard}
      className="absolute top-4 right-4 text-gray-700 hover:text-red-500 transition-transform duration-300 ease-in-out transform hover:scale-105"
      aria-label="Close Dashboard"
    >
      <AiOutlineClose className="w-7 h-7" />
    </button>

    {/* Wishlist */}
    <button 
      onClick={() => router.push('/wishlist')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineHeart className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">My Wishlist</span>
    </button>

    {/* Account Settings */}
    <button 
      onClick={() => router.push('/account')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineUser className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Settings</span>
    </button>

    {/* Order History */}
    <Link href="/order-history" legacyBehavior>
      <a className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg">
        <div className="p-2 bg-green-50 rounded-full shadow-inner">
          <AiOutlineHistory className="text-2xl text-green-600" />
        </div>
        <span className="text-lg font-semibold text-gray-800">Order History</span>
        {hasNewOrder && (
          <span className="absolute -top-2 -right-2 w-3 h-3 bg-red-500 rounded-full animate-ping"></span>
        )}
      </a>
    </Link>

    {/* Logout */}
    <button 
      onClick={handleSignOut}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineLogout className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Logout</span>
    </button>
  </div>
</aside>
     {/* Cart Sidebar */}
     <aside
        className={`fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-50 transform transition-transform duration-300 ease-in-out ${
          isCartOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="p-6">
          <button onClick={toggleCart} className="absolute top-4 right-4 text-gray-700 hover:text-red-500">
            <AiOutlineClose className="w-6 h-6" />
          </button>
          <CartPage />
        </div>
      </aside>

      {isCartOpen && (
      <div
      onClick={toggleCart}
      className='inset-0 bg-black bg-opacity-50 z-40'
      />
      )
      }
        {/* Auth Modal */}
        {isAuthModalOpen && (
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={closeAuthModal}
          onLoginSuccess={(token, name) => {
          setUserName(name);
           localStorage.setItem('jwtToken', token); closeAuthModal();
         }}
         /> 
        )} 
       </>
     );
   };

export default Navbar;













'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { AiOutlineSearch, AiOutlineShoppingCart, AiOutlineUser, AiOutlineHeart, AiOutlineDown, AiOutlineMenu, AiOutlineClose, AiOutlineHistory, AiOutlineLogout} from 'react-icons/ai';
import AuthModal from './AuthModal'; // Ensure this path is correct
import { useRouter } from 'next/navigation';
import { useCart } from '../context/CartContext';
import CartPage from '../cart/page';

interface NavbarProps {
  onSearch: (searchTerm: string) => void;
  onCategorySelect: (category: string) => void;
}

const Navbar: React.FC<NavbarProps> = ({ onSearch, onCategorySelect }) => {
  const router = useRouter();
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [userName, setUserName] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [wishlistCount, setWishlistCount] = useState(0);
  const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);
  const [isDashboardOpen, setIsDashboardOpen] = useState(false);
  const { totalItems } = useCart();
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [hasNewOrder, setHasNewOrder] = useState(false);

  const categories = [
    'Fiction',
    'Novel',
    "kids",
    'Romance',
    'Mystery',
    'Biography',
    'Art',
    'Games',
    "Children's",
    'Stationery & Gifts',
    'Science Fiction',
    "Our Favirotes",
  ];

  useEffect(() => {
    setIsClient(true);
    const token = localStorage.getItem('jwtToken');
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      setUserName(decodedToken.name);
    }

    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlistCount(storedWishlist.length);
  }, [router]);

  const closeAuthModal = () => setAuthModalOpen(false);
   
  useEffect(() => {
    const checkNewOrder = async () => {
      const response = await fetch('/api/get-order-details');
      const data = await response.json();
      setHasNewOrder(data.newOrder);
    };
    checkNewOrder();
  }, []);

  const handleSignOut = async () => {
    localStorage.removeItem('jwtToken');
    setUserName(null);
    router.push('/');
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      onSearch(searchTerm);
      navigateToExploreBooks();
      resetSearch();
    }
  };

  const resetSearch = () => setSearchTerm('');

  const navigateToExploreBooks = () => {
    const exploreSection = document.getElementById('explore-books');
    if (exploreSection) {
      const sectionPosition = exploreSection.getBoundingClientRect().top + window.scrollY;
      window.scrollTo({ top: sectionPosition - 140, behavior: 'smooth' });
    }
  };

  const handleViewWishlist = () => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      router.push('/wishlist');
    } else {
      alert('You need to be authenticated to view your wishlist.');
      setAuthModalOpen(true);
    }
  };

  const toggleAuthModal = () => setAuthModalOpen((prev) => !prev);

  const handleCategorySelect = (category: string) => {
    onCategorySelect(category);
    navigateToExploreBooks();
    setIsCategoriesOpen(false);
  };

  const toggleCart = () => setIsCartOpen((prev) => !prev); 

  const toggleDashboard = () => setIsDashboardOpen((prev) => !prev);

  if (!isClient) return null;

  return (
    <>
             
      {/* Upper Navbar - visible on larger screens */}
      <nav className="bg-gray-50 border-b border-green-300 fixed w-full top-0 z-50 shadow-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            
    <Link href="/" className="text-gray-900 text-2xl font-bold tracking-wide ml-6 hover:text-green-500">
    AbReads
    </Link>
  

            {/* Search Bar - visible on larger screens */}
            <form
  onSubmit={handleSearch}
  className="hidden lg:flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-3 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>

       {/* Right Icons */}
       <div className="flex items-center space-x-4">
  <button onClick={toggleCart} className="relative text-gray-900 hover:text-green-600">
    <AiOutlineShoppingCart className="text-2xl" />
    {totalItems > 0 && (
      <span className="absolute -top-2 -right-2 inline-block w-5 h-5 text-center bg-green-500 text-white rounded-full text-xs">
        {totalItems}
      </span>
    )}
  </button>

              <div className="flex items-center space-x-4 flex-row-reverse">
            {userName && (
        <button
      onClick={toggleDashboard}
      className="text-gray-900 hover:text-green-500 transition"
       >
      <p className='h-6 font-medium w-6 ml-2 mr-8 text-green-600 border-b border-green-700'>Account</p>
     </button>
      )}
      </div>
              {userName ? (
                <button onClick={handleSignOut} className="text-gray-900 hover:text-green-500 transition flex items-center">
                  <AiOutlineUser className="h-6 w-6" />
                  <span className="ml-1">Logout</span>
                </button>
              ) : (
                <button onClick={toggleAuthModal} className="text-gray-900 hover:text-green-500 transition">
                  <AiOutlineUser className="h-6 w-6" />
                </button>
              )}
              {/* Wishlist */}
              <button
  onClick={handleViewWishlist}
  className="relative py-1 px-4 group transition-colors duration-300 rounded-r-xl"
>
  <span className="group-hover:text-green-600 text-gray-700 flex items-center relative">
    <AiOutlineHeart className="mr-1 text-2xl" /> {/* Increased icon size */}
    {wishlistCount > 0 && (
      <span className="absolute -top-2 -right-2 bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
        {wishlistCount}
      </span>
    )}
  </span>
</button>

            </div>
          </div>
        </div>
      </nav>

      {/* Lower Navbar - always visible */}
{/* Lower Navbar - always visible */}
<nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-2 px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center"
        >
          📚 <span className="ml-2">Categories</span>
          <AiOutlineDown
            className={`ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}`}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

{/* Categories visible on large screens */}
<div className="hidden lg:flex space-x-6">
  {categories.map((category, index) => (
    <button
      key={category}
      onClick={() => handleCategorySelect(category)}
      className={`py-2 px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
        ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''}`}
    >
      {category}
    </button>
  ))}
</div>
 </div>

{/* Search Bar - visible on smaller screens */}
<form
  onSubmit={handleSearch}
  className="lg:hidden flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>
  </div>
</nav>

<aside
  className={`fixed inset-y-0 left-0 w-64 bg-gradient-to-b from-green-50 via-green-100 to-green-200 shadow-2xl z-50 transition-transform duration-300 ease-in-out
    ${isDashboardOpen ? 'transform translate-x-0' : 'transform -translate-x-full'}
    `}
>
  <div className="flex flex-col p-8 space-y-4 relative">
    {/* Close Icon - Only for small screens */}
    <button
      onClick={toggleDashboard}
      className="absolute top-4 right-4 text-gray-700 hover:text-red-500 transition-transform duration-300 ease-in-out transform hover:scale-105"
      aria-label="Close Dashboard"
    >
      <AiOutlineClose className="w-7 h-7" />
    </button>

    {/* Wishlist */}
    <button 
      onClick={() => router.push('/wishlist')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineHeart className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">My Wishlist</span>
    </button>

    {/* Account Settings */}
    <button 
      onClick={() => router.push('/account')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineUser className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Settings</span>
    </button>

    {/* Order History */}
    <Link href="/order-history" legacyBehavior>
      <a className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg">
        <div className="p-2 bg-green-50 rounded-full shadow-inner">
          <AiOutlineHistory className="text-2xl text-green-600" />
        </div>
        <span className="text-lg font-semibold text-gray-800">Order History</span>
        {hasNewOrder && (
          <span className="absolute -top-2 -right-2 w-3 h-3 bg-red-500 rounded-full animate-ping"></span>
        )}
      </a>
    </Link>

    {/* Logout */}
    <button 
      onClick={handleSignOut}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineLogout className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Logout</span>
    </button>
  </div>
</aside>
     {/* Cart Sidebar */}
     <aside
        className={`fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-50 transform transition-transform duration-300 ease-in-out ${
          isCartOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="p-6">
          <button onClick={toggleCart} className="absolute top-4 right-4 text-gray-700 hover:text-red-500">
            <AiOutlineClose className="w-6 h-6" />
          </button>
          <CartPage />
        </div>
      </aside>

      {isCartOpen && (
      <div
      onClick={toggleCart}
      className='inset-0 bg-black bg-opacity-50 z-40'
      />
      )
      }
        {/* Auth Modal */}
        {isAuthModalOpen && (
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={closeAuthModal}
          onLoginSuccess={(token, name) => {
          setUserName(name);
           localStorage.setItem('jwtToken', token); closeAuthModal();
         }}
         /> 
        )} 
       </>
     );
   };

export default Navbar;









import mongoose from 'mongoose';

// Define the function with an async return type
const dbConnect = async (): Promise<typeof mongoose> => {
  // Check if the connection is already open
  if (mongoose.connection.readyState >= 1) {
    return mongoose; // Return the mongoose instance if connected
  }

  // Connect to MongoDB and return the connection promise
  return mongoose.connect(process.env.MONGODB_URI as string);
};

export default dbConnect;










import axios from 'axios';
import Book from '../models/Book';
import mongoose from 'mongoose';

interface VolumeInfo {
  title: string;
  authors?: string[];
  description?: string;
  categories?: string[];
  imageLinks?: { thumbnail: string };
  publishedDate?: string;
  pageCount?: number;
  averageRating?: number;
  ratingsCount?: number;
}

interface BookData {
  googleId: string;
  title: string;
  authors: string[];
  description?: string;
  categories: string[];
  thumbnail: string;
  publishedDate?: string;
  pageCount?: number;
  averageRating?: number;
  ratingsCount?: number;
}

async function fetchBooksFromGoogle(query: string): Promise<void> {
  const url = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.GOOGLE_BOOKS_API_KEY as string}`;

  try {
    const response = await axios.get(url);
    const books = response.data.items;

    if (books && books.length > 0) {
      const bookData: BookData[] = books.map((book: { id: string; volumeInfo: VolumeInfo }) => {
        const volumeInfo = book.volumeInfo;
        return {
          googleId: book.id,
          title: volumeInfo.title,
          authors: volumeInfo.authors || [],
          description: volumeInfo.description,
          categories: volumeInfo.categories || [],
          thumbnail: volumeInfo.imageLinks?.thumbnail || '',
          publishedDate: volumeInfo.publishedDate,
          pageCount: volumeInfo.pageCount,
          averageRating: volumeInfo.averageRating,
          ratingsCount: volumeInfo.ratingsCount,
        };
      });

      // Save books to MongoDB
      await Book.insertMany(bookData);
      console.log('Books saved to MongoDB:', bookData.length);
    }
  } catch (error) {
    console.error('Error fetching books from Google Books API:', error);
  }   
}

export default fetchBooksFromGoogle;









// utils/auth.ts
import jwt from 'jsonwebtoken';

export const verifyToken = (token: string) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
    return decoded;
  } catch (error) {
    return null;
  }
};









// lib/mongodb.ts
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGO_URL;

if (!MONGODB_URI) {
  throw new Error(
    'Please define the MONGO_URL environment variable inside .env.local'
  );
}

/** Global is used to maintain a cached connection across hot reloads in development. */
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }
  

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }
  cached.conn = await cached.promise;
  return cached.conn;
}

export default dbConnect;

    





review.ts

import { NextApiRequest, NextApiResponse } from "next";
import dbConnect from "@/app/lib/mongodb";
import mongoose from "mongoose";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await dbConnect(); // Establish MongoDB connection

  const db = mongoose.connection.db; // Get the MongoDB database instance

  if (req.method === "GET") {
    const { bookId } = req.query;
    const reviews = await db.collection("reviews").find({ bookId }).toArray();
    return res.status(200).json(reviews);
  }

  if (req.method === "POST") {
    const { bookId, content, rating } = req.body;
    const newReview = {
      bookId,
      content,
      author: "Anonymous", // Replace with authenticated user's name if available
      rating,
    };
    await db.collection("reviews").insertOne(newReview);
    return res.status(201).json(newReview);
  }

  return res.status(405).end(); // Method Not Allowed
}





pages/api/reviews.ts



import { NextApiRequest, NextApiResponse } from "next";
import dbConnect from "@/app/utils/dbConnect";
import mongoose from "mongoose";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await dbConnect(); // Establish MongoDB connection

  const db = mongoose.connection.db; // Get the MongoDB database instance

  if (req.method === "GET") {
    const { bookId } = req.query;
    const reviews = await db.collection("reviews").find({ bookId }).toArray();
    return res.status(200).json(reviews);
  }

  if (req.method === "POST") {
    const { bookId, content, rating } = req.body;
    const newReview = {
      bookId,
      content,
      author: "Anonymous", // Replace with authenticated user's name if available
      rating,
    };
    await db.collection("reviews").insertOne(newReview);
    return res.status(201).json(newReview);
  }

  return res.status(405).end(); // Method Not Allowed
}









import mongoose from 'mongoose';

// Define the function with an async return type
const dbConnect = async (): Promise<typeof mongoose> => {
  // Check if the connection is already open
  if (mongoose.connection.readyState >= 1) {
    return mongoose; // Return the mongoose instance if connected
  }

  // Connect to MongoDB and return the connection promise
  return mongoose.connect(process.env.MONGODB_URI as string);
};

export default dbConnect;











mongo.ts

import type { NextApiRequest, NextApiResponse } from 'next';
import { MongoClient } from 'mongodb';

const MONGO_URL = process.env.MONGO_URL!;

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { q } = req.query;

  try {
    const client = await MongoClient.connect(MONGO_URL);
    const db = client.db('bookstore');
    const booksCollection = db.collection('books');

    const books = await booksCollection
      .find({ title: { $regex: q, $options: 'i' } })
      .toArray();

    res.status(200).json({ books });
    client.close();
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch books from MongoDB' });
  }
}






google.ts

import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { q } = req.query;
  
  try {
    const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${q}&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
    const data = await response.json();
    const books = data.items?.map((item: any) => ({
      id: item.id,
      title: item.volumeInfo.title,
      coverImage: item.volumeInfo.imageLinks?.thumbnail || '/default-cover.jpg',
      authors: item.volumeInfo.authors || ['Unknown'],
    }));
    res.status(200).json({ books });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch books from Google Books' });
  }
}







wishlist/page.tsx

'use client';

import { useEffect, useState, useRef } from 'react';
import Link from 'next/link';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';

export default function WishlistPage() {
  const [wishlist, setWishlist] = useState([]);
  const scrollRef = useRef(null);
  const [showLeftScroll, setShowLeftScroll] = useState(false);
  const [showRightScroll, setShowRightScroll] = useState(false);

  useEffect(() => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  }, []);

  const handleScroll = (e) => {
    if (scrollRef.current) {
      e.preventDefault(); 
      const { scrollLeft, scrollWidth, clientWidth } = scrollRef.current;
      
      // Calculate the amount to scroll horizontally
      const scrollAmount = e.deltaY > 0 ? 300 : -300; // Scroll right on down scroll, left on up scroll

      // Scroll horizontally
      scrollRef.current.scrollBy({
        left: scrollAmount,
        behavior: 'smooth',
      });

    
      setShowLeftScroll(scrollLeft > 0);
      setShowRightScroll(scrollLeft < scrollWidth - clientWidth);
    }
  };

  const scroll = (direction) => {
    const scrollAmount = 300; 
    scrollRef.current.scrollBy({
      top: 0,
      left: direction === 'right' ? scrollAmount : -scrollAmount,
      behavior: 'smooth',
    });
  };

  useEffect(() => {
    window.addEventListener('wheel', handleScroll, { passive: false });
    return () => {
      window.removeEventListener('wheel', handleScroll);
    };
  }, []);

  const removeFromWishlist = (id) => {
    const updatedWishlist = wishlist.filter(book => book.id !== id);
    setWishlist(updatedWishlist);
    localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
  };

  if (wishlist.length === 0) {
    return (
      <div className="container mx-auto text-center py-10">
        <h1 className="text-3xl font-bold text-gray-700">Your Wishlist is Empty</h1>
        <p className="text-gray-500">Add some books to your wishlist!</p>
        <Link href="/">
          <button className="mt-4 px-6 py-3 bg-blue-500 text-white rounded-lg shadow-lg hover:bg-blue-600 transition duration-300">
            Browse Books
          </button>
        </Link>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 relative h-screen overflow-hidden">
      <h1 className="text-5xl font-bold pt-16 mt-16 text-gray-800 mb-2 sticky top-0 bg-white z-10">
        My Wishlist
      </h1>

      <h2 className="text-xl text-gray-600 mb-6">
        {wishlist.length} {wishlist.length === 1 ? 'book' : 'books'} found in your wishlist
      </h2>

      {showLeftScroll && (
        <button
          className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full shadow-lg p-2 hover:bg-gray-200 transition duration-300"
          onClick={() => scroll('left')}
        >
          <ChevronLeftIcon className="h-8 w-8" />
        </button>
      )}
      {showRightScroll && (
        <button
          className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full shadow-lg p-2 hover:bg-gray-200 transition duration-300"
          onClick={() => scroll('right')}
        >
            <ChevronRightIcon className="h-8 w-8" />
        </button>
      )}

      <div
        ref={scrollRef}
        className="flex space-x-6 overflow-x-auto py-4 scrollbar-hide h-full"
      >
        {wishlist.map((book) => (
          <div
            key={book.id}
            className="flex-none w-72 border border-gray-300 rounded-lg p-4 shadow-lg hover:shadow-xl transition transform hover:-translate-y-2 duration-300 bg-white"
          >
            <img
              src={book.cover_url}
              alt={book.title}
              className="w-full h-80 object-cover mb-4 rounded-lg"
            />
            <h2 className="text-xl font-semibold text-gray-800 truncate">{book.title}</h2>
            <p className="text-gray-600">{book.author_name.join(', ')}</p>
            <div className="flex justify-between items-center mt-4">
              <Link href={`/book/${book.id}`}>
                <button className="px-4 py-2 bg-green-600 text-white rounded-lg shadow-lg hover:bg-green-700 transition duration-300 w-full">
                  View Details
                </button>
              </Link>
              <button
                className="ml-2 px-2 py-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition duration-300"
                onClick={() => removeFromWishlist(book.id)}
              >
                Remove
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}










// pages/api/account.ts
import { NextApiRequest, NextApiResponse } from 'next';

const accountHandler = async (req: NextApiRequest, res: NextApiResponse) => {
  const token = req.headers.authorization?.split(' ')[1]; // Extract token from headers

  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  switch (req.method) {
    case 'GET':
      // Logic to get user data from your database
      const userData = await getUserData(token);
      return res.status(200).json(userData);

    case 'PUT':
      // Logic to update user data in your database
      const updatedUser = await updateUserData(token, req.body);
      return res.status(200).json(updatedUser);

    default:
      return res.status(405).json({ message: 'Method Not Allowed' });
  }
};

const getUserData = async (token: string) => {
  // Your logic to fetch user data from the database using token
  return {
    name: 'John Doe',
    email: 'johndoe@example.com',
  };
};

const updateUserData = async (token: string, data: any) => {
  // Your logic to update user data in the database
  return {
    success: true,
    data: { ...data },
  };
};

export default accountHandler;











///pages/api/books.ts


import type { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { category, title, author } = req.query;

  // Build the query string dynamically based on available parameters
  let query = '';

  if (title) {
    query += `intitle:${encodeURIComponent(title as string)}`;  // Search by title
  }
  if (author) {
    query += (query ? '+' : '') + `inauthor:${encodeURIComponent(author as string)}`;  // Search by author
  }
  if (!query) {
    query = category ? encodeURIComponent(category as string) : 'fiction';  // Default to 'fiction'
  }

  const googleBooksUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;
  
  console.log('Constructed Google Books API URL:', googleBooksUrl);  // Log the URL for debugging

  try {
    const response = await axios.get(googleBooksUrl);
    res.status(200).json(response.data);
  } catch (error: any) {
    console.error('Error fetching books from Google Books API:', error.response?.data || error.message);
    
    const errorMessage = error.response ? error.response.data : 'Failed to fetch books';
    res.status(error.response?.status || 500).json({
      message: errorMessage,
      error: error.message,
    });
  }
}









// pages/api/contact.ts
import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
   if (req.method === 'POST') {
      const { name, email, message } = req.body;
      // Logic to handle message (e.g., sending an email, saving to database)
      res.status(200).json({ message: 'Message sent successfully!' });
   } else {
      res.setHeader('Allow', ['POST']);
      res.status(405).end(`Method ${req.method} Not Allowed`);
   }
}






pages/api/create-order.ts
import { NextApiRequest, NextApiResponse } from 'next';
import { MongoClient } from 'mongodb';
import Stripe from 'stripe'; // Import Stripe using ES module syntax

const MONGO_URL = process.env.MONGO_URL!;
const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY!; // Extract the Stripe secret key

const client = new MongoClient(MONGO_URL);
const stripe = new Stripe(STRIPE_SECRET_KEY, { apiVersion: '2022-11-15' }); // Initialize Stripe with the API version

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const { session_id, cartItems } = req.body;

    try {
      // Fetch session details from Stripe
      const session = await stripe.checkout.sessions.retrieve(session_id);

      // Connect to MongoDB
      await client.connect();
      const db = client.db('bookstore');
      const ordersCollection = db.collection('orders');

      // Insert order into database
      const newOrder = {
        userId: session.customer,
        cartItems: cartItems,
        totalAmount: session.amount_total / 100, // Convert cents to dollars
        paymentStatus: session.payment_status,
        createdAt: new Date(),
      };

      const result = await ordersCollection.insertOne(newOrder);

      res.status(200).json({ orderId: result.insertedId });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Failed to create order' });
    }
  } else {
    res.setHeader('Allow', 'POST');
    res.status(405).end('Method Not Allowed');
  }
}






pges/api/explore-books.ts



import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    const response = await fetch(
      `https://www.googleapis.com/books/v1/volumes?q=subject:fiction&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`
    );
    const data = await response.json();

    const books = data.items.map((item: any) => ({
      id: item.id,
      title: item.volumeInfo.title,
      authors: item.volumeInfo.authors || ['Unknown Author'],
      coverImage: item.volumeInfo.imageLinks?.thumbnail || '/no-image.jpg',
      publishedDate: item.volumeInfo.publishedDate || 'Unknown',
      rating: item.volumeInfo.averageRating || 0,
    }));

    res.status(200).json(books);
  } catch (error) {
    res.status(500).json({ message: 'Failed to fetch books' });
  }
}









// pages/api/create-checkout-session.ts

import { NextApiRequest, NextApiResponse } from "next";
import Stripe from "stripe";

// Initialize Stripe with your secret key
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2022-11-15",
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "POST") {
    try {
      const { cartItems } = req.body;

      // Create a checkout session
      const session = await stripe.checkout.sessions.create({
        payment_method_types: ["card"],
        line_items: cartItems.map((item: any) => ({
          price_data: {
            currency: "usd",
            product_data: {
              name: item.name,
              images: [item.image],
            },
            unit_amount: Math.round(item.price * 100), // Convert price to cents
          },
          quantity: item.quantity,
        })),
        mode: "payment",
        // Include session_id in success_url
        success_url: `${req.headers.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
        cancel_url: `${req.headers.origin}/cancel`,
      });

      // Respond with the session ID to the client
      res.status(200).json({ id: session.id });
    } catch (err: any) {
      res.status(500).json({ error: err.message });
    }
  } else {
    res.setHeader("Allow", "POST");
    res.status(405).end("Method Not Allowed");
  }
}






// pages/api/featured-books.ts
import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY;
  const query = 'technology'; // Modify this query as needed for your featured section
  const BASE_URL = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${apiKey}`;

  try {
    const response = await fetch(BASE_URL);
    
    // Check for any API response errors
    if (!response.ok) {
      throw new Error('Failed to fetch data from Google Books API');
    }

    const data = await response.json();

    if (!data.items || data.items.length === 0) {
      // Handle the case where no books are returned
      return res.status(404).json({ error: 'No books found' });
    }

    // Ensure that each book has the necessary fields, or provide fallback values
    const books = data.items.map((item: any) => ({
      id: item.id,
      title: item.volumeInfo.title || 'No Title Available',
      cover_url: item.volumeInfo.imageLinks?.thumbnail || '/placeholder.jpg',
      author_name: item.volumeInfo.authors || ['Unknown Author'],
      public_rating: item.volumeInfo.averageRating?.toString() || 'Not Available',
      published_year: item.volumeInfo.publishedDate?.split('-')[0] || 'Not Available',
      description: item.volumeInfo.description || 'No description available',
    }));

    // Send a JSON response with the books array
    res.status(200).json({ items: books });
  } catch (error) {
    console.error('Error fetching data:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}



pages/api/fetchesbooks.ts


import { NextApiRequest, NextApiResponse } from 'next';

const GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes?q=YOUR_QUERY&key=YOUR_GOOGLE_BOOKS_API_KEY';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  try {
    const response = await fetch(GOOGLE_BOOKS_API_URL);
    const data = await response.json();

    const books = data.items?.map((item: any) => ({
      id: item.id,
      title: item.volumeInfo.title,
      coverImage: item.volumeInfo.imageLinks?.thumbnail || '',
    })) || [];

    res.status(200).json(books);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch books' });
  }
};











// pages/api/save-order.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '@/app/utils/dbConnect';
import Order from '@/app/models/Orders';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    await dbConnect();

    
    const { date, status, line_items, stripeSessionId, userId } = req.body;

  
    if (!date || !status || !line_items || !stripeSessionId || !userId) {
      return res.status(400).json({ message: 'Missing required order information.' });
    }

    try {
      // Create the order object
      const newOrder = new Order({
        date,  
        status, 
        stripeSessionId, 
        items: line_items.map((item: any) => ({
          name: item.name,  
          price: item.price, 
          quantity: item.quantity, 
          image: item.image || '', 
        })),
      });

      await newOrder.save();
      res.status(201).json({ message: 'Order saved successfully', order: newOrder });
    } catch (error) {
      console.error('Error saving order:', error);
      res.status(500).json({ message: 'Failed to save order', error: error.message });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}




pages/api/savebooks.ts
import { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '@/app/utils/dbConnect';
import mongoose from 'mongoose';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const books = req.body;

    try {
      // Ensure MongoDB connection
      const client = await dbConnect();
      

      // Access the database
      const db = mongoose.connection.db;
      const result = await db.collection('books').insertMany(books);

      res.status(200).json(result);
    } catch (error) {
      console.error("Error saving books:", error);
      res.status(500).json({ error: 'Failed to save books' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}






reviewmodal

import { useState } from "react";

interface Review {
  id: string;
  content: string;
  author: string;
  rating: number;
}

interface ReviewModalProps {
  onClose: () => void;
  reviews: Review[];
  bookId: string;
}

export default function ReviewModal({ onClose, reviews = [], bookId }: ReviewModalProps) {
  const [reviewTitle, setReviewTitle] = useState("");
  const [reviewContent, setReviewContent] = useState("");
  const [rating, setRating] = useState<number | null>(null);
  const [showTips, setShowTips] = useState(false); // State to toggle tips
  const [loading, setLoading] = useState(false);

  const submitReview = async () => {
    if (!reviewTitle || !reviewContent || rating === null) {
      alert("Please provide a title, review, and a rating.");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("/api/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          bookId,
          title: reviewTitle,
          content: reviewContent,
          rating,
        }),
      });

      if (res.ok) {
        alert("Review submitted successfully!");
        setReviewTitle("");
        setReviewContent("");
        setRating(null);
        onClose();
      } else {
        alert("Failed to submit review.");
      }
    } catch (error) {
      console.error("Failed to submit review:", error);
      alert("An error occurred while submitting your review.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-gray-800 bg-opacity-70 z-50 flex justify-center items-center transition-opacity">
      <div className="bg-white p-8 rounded-lg shadow-2xl w-[90%] max-w-2xl transform transition-transform hover:scale-105">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Write Your Review</h2>

        {/* Tips for Reviewers */}
        <div className="mb-6">
          <button
            onClick={() => setShowTips(!showTips)}
            className="text-red-600 hover:text-red-800 underline mb-2"
          >
            Tips for Reviewers
          </button>
          {showTips && (
            <ul className="pl-4 mb-4 text-sm text-gray-700 space-y-3 animate-fadeIn">
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Be specific about what you liked or disliked.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Provide constructive feedback with examples.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Keep it respectful and honest.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Avoid spoilers when discussing the plot.</span>
              </li>
            </ul>
          )}
        </div>

        {/* Review Form */}
        <div className="space-y-6 mb-4">
          {/* Title Input */}
          <input
            type="text"
            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Title of your review (e.g., 'Great Book!')"
            value={reviewTitle}
            onChange={(e) => setReviewTitle(e.target.value)}
          />

          {/* Rating Stars */}
          <div className="flex items-center space-x-2 mb-4">
            <span className="text-gray-700 font-semibold">Rate this item:</span>
            <div className="flex space-x-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 
                  ${rating === star ? "bg-yellow-500 text-white scale-110" : "bg-gray-300 text-gray-700 hover:bg-yellow-300 hover:scale-105"}`}
                  onClick={() => setRating(star)}
                  aria-label={`Rate ${star} out of 5`}
                >
                  ⭐
                </button>
              ))}
            </div>
          </div>

          {/* Review Content */}
          <textarea
            className="w-full p-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Write your review here (e.g., 'I really enjoyed the character development...')"
            value={reviewContent}
            onChange={(e) => setReviewContent(e.target.value)}
            rows={5}
          />
        </div>

        <div className="flex justify-end">
          <button
            className={`px-6 py-3 bg-blue-600 text-white rounded-lg mr-2 transition-all duration-300 
              ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={submitReview}
            disabled={loading}
          >
            {loading ? (
              <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10" strokeWidth="4"></circle>
                <path d="M4 12a8 8 0 014-6.93" strokeWidth="4"></path>
              </svg>
            ) : (
              "Submit Review"
            )}
          </button>
          <button
            className="px-6 py-3 bg-gray-400 text-gray-800 rounded-lg hover:bg-gray-500 transition-all duration-300"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}







'use client';
import { Metadata } from 'next';
import localFont from 'next/font/local';
import Head from 'next/head';
import './globals.css';
import Navbar from './components/Navbar';
import SessionProvider from './components/SessionProvider';
import FeaturedBooks from './components/FeaturedBooks';
import ExploreBooks from './components/ExploreBooks';
import React, { useState } from 'react';
import { CartProvider } from './context/CartContext';
import { usePathname } from 'next/navigation'; 
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { persistor, store } from '../app/redux/store';
import Footer from './components/Footer';
import Bestsellers from './components/Bestsellers';
import HeroSection from './components/Hero';
import ComingSoon from './components/ComingSoon';
import { WishlistProvider } from './context/WishlistContext';



// Load local fonts
const geistSans = localFont({
  src: './fonts/GeistVF.woff', 
  variable: '--font-geist-sans',
  weight: '100 900',
});
const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null); 
  const pathname = usePathname();

  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    setSearchTerm(''); // Clear search term when a category is selected
  };

  const handleSearch = (term: string) => {
    setSearchTerm(term);
    setSelectedCategory(null); // Clear category when searching
  };

  const handleBookSelect = (bookId: string) => {
    setSelectedBookId(bookId); // Set the selected book ID
  };

  const isDetailsPage = pathname.startsWith('/details');

  return (
    <html lang="en">
            <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <body>
        <SessionProvider>
          <CartProvider>
          <WishlistProvider>
            {!isDetailsPage && (
              <Provider store={store}>
                <PersistGate loading={null} persistor={persistor}>
                  <div className="pb-14">
                    {/* Pass selectedBookId as currentBookId */}
                    <Navbar 
                      onSearch={handleSearch} 
                      onCategorySelect={handleCategorySelect} 
                      currentBookId={selectedBookId} 
                    />
                 <main className="flex-grow">{children}</main>
                  </div>
                  <div className='pt-8 mt-8'>
                  </div> 
                  <div className='pt-1 mt-1'>
               <HeroSection />
               </div>
                  <div>
                    <Bestsellers />
                  </div>
                  <div>
                    <FeaturedBooks onBookSelect={handleBookSelect} /> {/* Ensure you handle book selection here */}
                  </div>
                  <div className='pt-4 mt-4'>
                  <ComingSoon />
                  </div>
                  <div>
                  <ExploreBooks category={selectedCategory} searchTerm={searchTerm} />
                  </div>
                  <div className='pt-6 mt-6'>
                    <Footer />
                  </div>
                </PersistGate>
              </Provider>
            )}
            {children}
            </WishlistProvider>
          </CartProvider>
        </SessionProvider>
      </body>
    </html>
  );
}







// src/app/order-history/page.tsx
"use client"
import { useEffect, useState } from "react";

export default function OrderHistoryPage() {
  const [orders, setOrders] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchOrders() {
      try {
        const response = await fetch("/api/get-order-history");
        if (!response.ok) throw new Error("Failed to fetch orders");
        const data = await response.json();
        setOrders(data.orders || []);
      } catch (error: any) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    }
    fetchOrders();
  }, []);

  if (loading) return <p className="text-center text-gray-500">Loading...</p>;
  if (error) return <p className="text-center text-red-500">{error}</p>;
  if (!orders.length) return <p className="text-center text-gray-500">No orders found.</p>;

  return (
    <div className="pt-16 mt-16 max-w-3xl mx-auto px-4">
      <h1 className="pt-4 mt-4 text-3xl font-semibold text-center mb-8">Order History</h1>
      {orders.map((order) => (
        <div key={order.id} className="bg-white shadow-lg rounded-lg p-6 mb-6">
          <div className="border-b pb-4 mb-4">
            <p className="text-sm text-gray-400">Order Date: <span className="font-semibold">{new Date(order.created_at * 1000).toLocaleDateString()}</span></p>
            <p className="text-sm text-gray-400">Order ID: <span className="font-semibold">{order.id}</span></p>
          </div>
          <ul>
            {order.items && order.items.length ? (
              order.items.map((item: any) => (
                <li key={item.id} className="flex justify-between py-2 border-b last:border-none">
                  <div>
                    <p className="font-semibold">{item.description}</p>
                    <p className="text-sm text-gray-500">Quantity: {item.quantity}</p>
                  </div>
                  <p className="text-sm font-medium text-green-600">Price: ${item.price}</p>
                </li>
              ))
            ) : (
              <p className="text-gray-500">No items found for this order.</p>
            )}
          </ul>
        </div>
      ))}
    </div>
  );
}






import React, { useEffect, useState, useRef } from 'react';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';
import Link from 'next/link';
import BookCard from './BookCard'; // Import the BookCard component

interface Book {
  id: string;
  volumeInfo: {
    title: string;
    authors: string[];
    imageLinks: {
      thumbnail: string;
    };
  };
}

const ComingSoon = () => {
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const response = await fetch(
          `https://www.googleapis.com/books/v1/volumes?q=coming+soon&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`
        );
        if (!response.ok) {
          throw new Error('Failed to fetch books');
        }
        const data = await response.json();
        setBooks(data.items || []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchBooks();
  }, []);

  const scrollRight = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: 300,
        behavior: 'smooth',
      });
    }
  };

  const scrollLeft = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: -300,
        behavior: 'smooth',
      });
    }
  };

  if (loading) {
    return (
      <section className="my-12 px-4 lg:py-10 bg-white text-gray-800">
        <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-600 leading-tight">
          Coming <span className="text-gray-600">Soon</span>
        </h2>
        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide">
          {Array.from({ length: 5 }).map((_, index) => (
            <div key={index} className="min-w-[220px] max-w-[220px]">
              {/* Replace with Skeleton component if you have one */}
              <div className="h-64 bg-gray-300 animate-pulse rounded-lg"></div>
            </div>
          ))}
        </div>
      </section>
    );
  }

  if (error) {
    return <div className="text-center text-red-500">{error}</div>;
  }

  return (
    <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        Exciting New Release <span className="text-gray-600">Coming Soon</span>
      </h2>

      <div className="relative flex items-center justify-center mt-6">
        <button
          className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollLeft}
        >
          <ChevronLeftIcon className="h-6 w-6" />
        </button>

        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide" ref={scrollContainerRef}>
          {books.map((book) => (
            <Link key={book.id} href={`/details/${book.id}`}>
              <div className="min-w-[220px] max-w-[220px] snap-start shrink-0 cursor-pointer transition-transform duration-300 hover:scale-105 transform-gpu bg-white rounded-lg overflow-hidden">
                <BookCard
                  book={{
                    id: book.id,
                    title: book.volumeInfo.title,
                    author: book.volumeInfo.authors?.join(', ') || 'Unknown Author',
                    cover_url: book.volumeInfo.imageLinks?.thumbnail || '/placeholder.png',
                  }}
                />
              </div>
            </Link>
          ))}
        </div>

        <button
          className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollRight}
        >
          <ChevronRightIcon className="h-6 w-6" />
        </button>
      </div>
    </section>
  );
};

export default ComingSoon;








// pages/dashboard.tsx
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';

const Dashboard: React.FC = () => {
  const router = useRouter();
  const [userInfo, setUserInfo] = useState<any>(null); // Fetch user data

  useEffect(() => {
    // Fetch user info here
    const token = localStorage.getItem('jwtToken');
    if (token) {
      // Decode token to get user data (replace this with your own API call)
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      setUserInfo(decodedToken);
    } else {
      router.push('/'); // Redirect to home if not authenticated
    }
  }, [router]);

  if (!userInfo) return <p>Loading...</p>;

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-20">
      <h1 className="text-2xl font-bold mb-6">Welcome to Your Dashboard, {userInfo.name}!</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Add your dashboard components here */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Your Wishlist</h2>
          {/* Render wishlist items */}
        </div>
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Your Orders</h2>
          {/* Render order history */}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;




// app/cancel/page.tsx
'use client'
import Image from 'next/image';
import { useRouter } from 'next/navigation';

export default function CancelPage() {
  const router = useRouter();

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-b from-red-50 to-red-100">
      <div className="bg-white shadow-lg p-8 rounded-lg text-center max-w-md mx-auto">
        <Image
          src="/images/cancel-illustration.svg" // Add a relevant illustration here
          alt="Payment Canceled"
          width={200}
          height={200}
          className="mx-auto mb-4"
        />
        <h2 className="text-3xl font-bold text-red-600">Oops! Payment Canceled</h2>
        <p className="text-gray-600 mt-4">
          Your payment was not processed. Don't worry, you can try again or explore our collection of amazing books!
        </p>
        <div className="mt-6 space-x-4">
          <button
            onClick={() => router.push('/')} // Redirect to home
            className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition"
          >
            Return to Store
          </button>
        </div>
      </div>
    </div>
  );
}






// app/cart/page.tsx

"use client";

import { useCart } from "@/app/context/CartContext";
import CheckoutButton from "@/app/components/CheckoutButton";

interface CartItem {
  id: string;
  title: string;
  cover_url: string;
  price: number;
}

export default function CartPage() {
  const { cart, removeFromCart } = useCart();

  if (cart.length === 0) {
    return (
      <div className="flex justify-center items-center h-full bg-gray-50">
        <p className="text-2xl text-gray-600">Your cart is empty.</p>
      </div>
    );
  }

  // Prepare cart items for the CheckoutButton component
  const cartItems = cart.map((item: CartItem) => ({
    name: item.title,
    image: item.cover_url,
    price: item.price,
    quantity: 1, // Assuming each item has a quantity of 1
  }));

  return (
    <div className="h-full w-full flex flex-col bg-gray-100 p-6 md:max-w-xs md:fixed md:right-0 md:top-0 md:h-full shadow-xl">
      <h1 className="text-2xl font-bold text-center text-gray-800 mb-4">Your Cart</h1>

      <div className="flex-grow overflow-y-auto mb-4 space-y-4">
        {cart.map((item: CartItem) => (
          <div
            key={item.id}
            className="flex flex-col bg-white shadow-md p-4 rounded-lg transition-transform duration-200 ease-in-out hover:shadow-lg hover:-translate-y-1"
          >
            <div className="flex items-center space-x-4">
              <img
                src={item.cover_url}
                alt={item.title}
                className="w-20 h-20 object-cover rounded-lg transform hover:scale-105 transition-all duration-200"
              />
              <div className="flex-1">
                <h2 className="text-lg font-medium text-gray-800 truncate">{item.title}</h2>
                <p className="text-sm font-semibold text-green-600">${item.price.toFixed(2)}</p>
              </div>
            </div>
            <button
              className="mt-4 text-sm bg-red-500 text-white font-semibold py-2 rounded-lg hover:bg-red-600 transition duration-200 w-full"
              onClick={() => removeFromCart(item.id)}
            >
              Remove
            </button>
          </div>
        ))}
      </div>

      <div className="p-4 bg-white sticky bottom-0 shadow-lg">
        <CheckoutButton cartItems={cartItems} />
      </div>
    </div>
  );
}






// app/success/page.tsx
'use client';
import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

const SuccessPage = () => {
  const searchParams = useSearchParams();
  const session_id = searchParams.get('session_id');
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const router = useRouter();

  // Prevent scrolling on page load
  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  // Fetch order details and save to history
  useEffect(() => {
    if (session_id) {
      const fetchAndSaveOrder = async () => {
        try {
          const response = await fetch(`/api/get-order-details?session_id=${session_id}`);
          if (!response.ok) throw new Error('Failed to fetch order details');
          
          const data = await response.json();
          setOrderDetails(data);
          setOrderConfirmed(true);

          // Save order to history
          await fetch('/api/save-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...data, userId: 'sampleUserId' }),
          });
        } catch (error) {
          setError('Unable to load order details');
        } finally {
          setLoading(false);
        }
      };
      fetchAndSaveOrder();
    } else {
      setError('Session ID is missing');
      setLoading(false);
    }
  }, [session_id]);

  if (loading) return <p className="text-lg text-gray-700">Loading order details...</p>;
  if (error) return <p className="text-red-600">{error}</p>;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="min-h-screen flex flex-col items-center justify-center mt-16 pt-16 p-4">
        <div className="bg-white shadow-lg p-8 rounded-lg max-w-3xl w-full sm:w-11/12 md:w-3/4 lg:w-full transition transform hover:scale-105">
          <h1 className="text-4xl font-bold mb-6 text-center text-green-600">Order Success!</h1>
          {orderConfirmed && (
            <p className="text-lg text-green-500 mb-4">Your order has been confirmed!</p>
          )}
          {orderDetails ? (
            <div>
              <h2 className="text-2xl font-semibold mb-4">Thank you for your order!</h2>
              <div className="border-t border-gray-200 my-4" />
              <p className="text-lg mb-2"><strong>Order ID:</strong> {orderDetails.id}</p>
              <p className="text-lg mb-4"><strong>Amount Paid:</strong> ${(orderDetails.amount_total / 100).toFixed(2)}</p>
              <h3 className="text-xl font-semibold mb-2">Order Details:</h3>
              <ul className="space-y-4">
                {orderDetails.line_items?.data?.map((item: any) => (
                  <li key={item.id} className="flex justify-between items-center bg-gray-50 p-4 rounded-md shadow-sm transition hover:bg-gray-100">
                    <div>
                      <p className="font-medium">{item.description}</p>
                      <p className="text-sm text-gray-500"><strong>Quantity:</strong> {item.quantity}</p>
                    </div>
                    <p className="text-lg font-semibold">${(item.amount_total / 100).toFixed(2)}</p>
                  </li>
                ))}
              </ul>
              <div className="mt-6 flex space-x-4">
                <button 
                  onClick={() => router.replace('/')} 
                  className="inline-block px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
                >
                  Return to Home
                </button>
              </div>   
            </div>
          ) : (
            <p>Order details not available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default SuccessPage;








import { useEffect, useState, useMemo } from 'react';
import BookCard from './BookCard';
import Pagination from './Pagination';
import Skeleton from './Skeleton';

interface ExploreBooksProps {
  category: string | null;
  searchTerm: string;
}

const ExploreBooks: React.FC<ExploreBooksProps> = ({ category, searchTerm }) => {
  const [books, setBooks] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);

  useEffect(() => {
    const fetchBooks = async () => {
      setLoading(true);
      try {
        const query = category
          ? `category=${category}`
          : searchTerm
          ? `title=${searchTerm}`
          : 'bestsellers';

        const response = await fetch(`/api/books?${query}&page=${currentPage}&limit=12`);
        const data = await response.json();

        setBooks(data.items ?? []);
        setTotalPages(Math.ceil(data.totalItems / 12));
        setLoading(false);
      } catch (error) {
        console.error('Error fetching books:', error);
        setError('Failed to load books');
        setLoading(false);
      }
    };

    fetchBooks();
  }, [category, searchTerm, currentPage]);

  useEffect(() => {
    const exploreBooksSection = document.getElementById('explore-books');
    if (exploreBooksSection) {
      exploreBooksSection.scrollIntoView({ behavior: 'smooth' });
    }
  }, [currentPage]);

  const cachedBooks = useMemo(() => books, [books]);

  if (loading) {
    return (
      <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
        <Skeleton count={12} />
      </section>
    );
  }

  if (error) {
    return <div className="text-center mt-20 text-red-500">{error}</div>;
  }

  return (
    <section id="explore-books" className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800"> {/* Matching layout */}
      {/* Main Heading */}
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        {category ? `${category} Books` : searchTerm ? `Results for "${searchTerm}"` : 'Explore Popular Books'}
      </h2>

      {/* Description */}
      <p className="text-lg lg:text-xl text-gray-600 mb-6 text-left leading-relaxed">
        {category || searchTerm ? 'Discover top-rated books.' : 'Check out the most popular books right now.'}
      </p>

      {/* Books Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
        {cachedBooks.length > 0 ? (
          cachedBooks.map((book) => (
            <div key={book.id} className="min-w-[220px] max-w-[220px] group relative transform transition-transform duration-300 hover:scale-105 rounded-lg overflow-hidden">
              <BookCard
                book={{
                  id: book.id,
                  title: book.volumeInfo.title,
                  cover_url: book.volumeInfo.imageLinks?.thumbnail || '/default-book-cover.jpg',
                }}
              />
            </div>
          ))
        ) : (
          <p className="text-center text-gray-500 col-span-full">No books found.</p>
        )}
      </div>

      {/* Pagination */}
      <div className="flex justify-center mt-12">
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
      </div>
    </section>
  );
};

export default ExploreBooks;














import { NextApiRequest, NextApiResponse } from 'next';

// Define an interface for the user data
interface UserData {
  name: string;
  email: string;
}

// Define a more specific type for update data
type UpdateData = {
  name?: string;
  email?: string;
};

const accountHandler = async (req: NextApiRequest, res: NextApiResponse) => {
  const token = req.headers.authorization?.split(' ')[1]; // Extract token from headers

  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  switch (req.method) {
    case 'GET':
      // Logic to get user data from your database
      const userData = await getUserData(token);
      return res.status(200).json(userData);

    case 'PUT':
      // Logic to update user data in your database
      const updatedUser = await updateUserData(req.body);
      return res.status(200).json(updatedUser);

    default:
      return res.status(405).json({ message: 'Method Not Allowed' });
  }
};

const getUserData = async (token: string): Promise<UserData> => {
  // Your logic to fetch user data from the database using token
  return {
    name: 'John Doe',
    email: 'johndoe@example.com',
  };
};

const updateUserData = async (data: UpdateData) => {
  // Your logic to update user data in the database
  return {
    success: true,
    data: { ...data },
  };
};

export default accountHandler;









// pages/orders.tsx
import { useEffect, useState } from 'react';

const OrdersPage = () => {
  const [orders, setOrders] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch('/api/get-orders');
        const data = await response.json();
        setOrders(data.orders);
      } catch (error) {
        console.error('Error fetching orders:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  if (loading) return <p>Loading your orders...</p>;

  return (
    <div className="p-8">
      <h1 className="text-2xl font-semibold mb-4">My Orders</h1>
      <ul className="space-y-4">
        {orders.map(order => (
          <li key={order.id} className="border p-4 rounded shadow-sm">
            <p><strong>Order ID:</strong> {order.id}</p>
            <p><strong>Total Amount:</strong> ${(order.amount_total / 100).toFixed(2)}</p>
            <ul className="mt-2">
              {order.items.map((item: any) => (
                <li key={item.id}>
                  {item.description} - Qty: {item.quantity}
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default OrdersPage;










wishlist/page.tsx


'use client';

import { useEffect, useState, useRef } from 'react';
import Link from 'next/link';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';
import Image from 'next/image';

interface Book {
  id: string;
  cover_url: string;
  title: string;
  author_name: string[];
}

export default function WishlistPage() {
  const [wishlist, setWishlist] = useState<Book[]>([]);
  const scrollRef = useRef<HTMLDivElement>(null);
  const [showLeftScroll, setShowLeftScroll] = useState(false);
  const [showRightScroll, setShowRightScroll] = useState(false);

  useEffect(() => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  }, []);

  const handleScroll = (e: React.WheelEvent) => {
    if (scrollRef.current) {
      e.preventDefault(); 
      const { scrollLeft, scrollWidth, clientWidth } = scrollRef.current;
      
      // Calculate the amount to scroll horizontally
      const scrollAmount = e.deltaY > 0 ? 300 : -300; // Scroll right on down scroll, left on up scroll

      // Scroll horizontally
      scrollRef.current.scrollBy({
        left: scrollAmount,
        behavior: 'smooth',
      });

      setShowLeftScroll(scrollLeft > 0);
      setShowRightScroll(scrollLeft < scrollWidth - clientWidth);
    }
  };

  const scroll = (direction: 'left' | 'right') => {
    const scrollAmount = 300; 
    scrollRef.current?.scrollBy({
      top: 0,
      left: direction === 'right' ? scrollAmount : -scrollAmount,
      behavior: 'smooth',
    });
  };

  useEffect(() => {
    window.addEventListener('wheel', handleScroll, { passive: false });
    return () => {
      window.removeEventListener('wheel', handleScroll);
    };
  }, []);

  const removeFromWishlist = (id: string) => {
    const updatedWishlist = wishlist.filter(book => book.id !== id);
    setWishlist(updatedWishlist);
    localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
  };

  if (wishlist.length === 0) {
    return (
      <div className="container mx-auto text-center py-10">
        <h1 className="text-3xl font-bold text-gray-700">Your Wishlist is Empty</h1>
        <p className="text-gray-500">Add some books to your wishlist!</p>
        <Link href="/">
          <button className="mt-4 px-6 py-3 bg-blue-500 text-white rounded-lg shadow-lg hover:bg-blue-600 transition duration-300">
            Browse Books
          </button>
        </Link>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 relative h-screen overflow-hidden">
      <h1 className="text-5xl font-bold pt-16 mt-16 text-gray-800 mb-2 sticky top-0 bg-white z-10">
        My Wishlist
      </h1>

      <h2 className="text-xl text-gray-600 mb-6">
        {wishlist.length} {wishlist.length === 1 ? 'book' : 'books'} found in your wishlist
      </h2>

      {showLeftScroll && (
        <button
          className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full shadow-lg p-2 hover:bg-gray-200 transition duration-300"
          onClick={() => scroll('left')}
        >
          <ChevronLeftIcon className="h-8 w-8" />
        </button>
      )}
      {showRightScroll && (
        <button
          className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white rounded-full shadow-lg p-2 hover:bg-gray-200 transition duration-300"
          onClick={() => scroll('right')}
        >
            <ChevronRightIcon className="h-8 w-8" />
        </button>
      )}

      <div
        ref={scrollRef}
        className="flex space-x-6 overflow-x-auto py-4 scrollbar-hide h-full"
      >
        {wishlist.map((book) => (
          <div
            key={book.id}
            className="flex-none w-72 border border-gray-300 rounded-lg p-4 shadow-lg hover:shadow-xl transition transform hover:-translate-y-2 duration-300 bg-white"
          >
            <Image
              src={book.cover_url}
              alt={book.title}
              width={500} // Adjust dimensions as needed
              height={300}
              className="w-full h-80 object-cover mb-4 rounded-lg"
            />
            <h2 className="text-xl font-semibold text-gray-800 truncate">{book.title}</h2>
            <p className="text-gray-600">{book.author_name.join(', ')}</p>
            <div className="flex justify-between items-center mt-4">
              <Link href={`/book/${book.id}`}>
                <button className="px-4 py-2 bg-green-600 text-white rounded-lg shadow-lg hover:bg-green-700 transition duration-300 w-full">
                  View Details
                </button>
              </Link>
              <button
                className="ml-2 px-2 py-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition duration-300"
                onClick={() => removeFromWishlist(book.id)}
              >
                Remove
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}







// app/success/page.tsx
'use client';
import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

const SuccessPage = () => {
  const searchParams = useSearchParams();
  const session_id = searchParams.get('session_id');
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const router = useRouter();

  // Prevent scrolling on page load
  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, []);

  // Fetch order details and save to history
  useEffect(() => {
    if (session_id) {
      const fetchAndSaveOrder = async () => {
        try {
          const response = await fetch(`/api/get-order-details?session_id=${session_id}`);
          if (!response.ok) throw new Error('Failed to fetch order details');
          
          const data = await response.json();
          setOrderDetails(data);
          setOrderConfirmed(true);

          // Save order to history
          await fetch('/api/save-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...data, userId: 'sampleUserId' }),
          });
        } catch (error) {
          setError('Unable to load order details');
        } finally {
          setLoading(false);
        }
      };
      fetchAndSaveOrder();
    } else {
      setError('Session ID is missing');
      setLoading(false);
    }
  }, [session_id]);

  if (loading) return <p className="text-lg text-gray-700">Loading order details...</p>;
  if (error) return <p className="text-red-600">{error}</p>;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="min-h-screen flex flex-col items-center justify-center mt-16 pt-16 p-4">
        <div className="bg-white shadow-lg p-8 rounded-lg max-w-3xl w-full sm:w-11/12 md:w-3/4 lg:w-full transition transform hover:scale-105">
          <h1 className="text-4xl font-bold mb-6 text-center text-green-600">Order Success!</h1>
          {orderConfirmed && (
            <p className="text-lg text-green-500 mb-4">Your order has been confirmed!</p>
          )}
          {orderDetails ? (
            <div>
              <h2 className="text-2xl font-semibold mb-4">Thank you for your order!</h2>
              <div className="border-t border-gray-200 my-4" />
              <p className="text-lg mb-2"><strong>Order ID:</strong> {orderDetails.id}</p>
              <p className="text-lg mb-4"><strong>Amount Paid:</strong> ${(orderDetails.amount_total / 100).toFixed(2)}</p>
              <h3 className="text-xl font-semibold mb-2">Order Details:</h3>
              <ul className="space-y-4">
                {orderDetails.line_items?.data?.map((item: any) => (
                  <li key={item.id} className="flex justify-between items-center bg-gray-50 p-4 rounded-md shadow-sm transition hover:bg-gray-100">
                    <div>
                      <p className="font-medium">{item.description}</p>
                      <p className="text-sm text-gray-500"><strong>Quantity:</strong> {item.quantity}</p>
                    </div>
                    <p className="text-lg font-semibold">${(item.amount_total / 100).toFixed(2)}</p>
                  </li>
                ))}
              </ul>
              <div className="mt-6 flex space-x-4">
                <button 
                  onClick={() => router.replace('/')} 
                  className="inline-block px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
                >
                  Return to Home
                </button>
              </div>   
            </div>
          ) : (
            <p>Order details not available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default SuccessPage;









import { useState } from "react";

interface Review {
  id: string;
  content: string;
  author: string;
  rating: number;
}

interface ReviewModalProps {
  onClose: () => void;
  reviews: Review[];
  bookId: string;
}

export default function ReviewModal({ onClose, reviews = [], bookId }: ReviewModalProps) {
  const [reviewTitle, setReviewTitle] = useState("");
  const [reviewContent, setReviewContent] = useState("");
  const [rating, setRating] = useState<number | null>(null);
  const [showTips, setShowTips] = useState(false); // State to toggle tips
  const [loading, setLoading] = useState(false);

  const submitReview = async () => {
    if (!reviewTitle || !reviewContent || rating === null) {
      alert("Please provide a title, review, and a rating.");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("/api/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          bookId,
          title: reviewTitle,
          content: reviewContent,
          rating,
        }),
      });

      if (res.ok) {
        alert("Review submitted successfully!");
        setReviewTitle("");
        setReviewContent("");
        setRating(null);
        onClose();
      } else {
        alert("Failed to submit review.");
      }
    } catch (error) {
      console.error("Failed to submit review:", error);
      alert("An error occurred while submitting your review.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-gray-800 bg-opacity-70 z-50 flex justify-center items-center transition-opacity">
      <div className="bg-white p-8 rounded-lg shadow-2xl w-[90%] max-w-2xl transform transition-transform hover:scale-105">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Write Your Review</h2>

        {/* Display Reviews */}
        <div className="mb-6">
          <h3 className="text-xl font-semibold">Previous Reviews:</h3>
          {reviews.length > 0 ? (
            <ul className="mt-2 space-y-4">
              {reviews.map((review) => (
                <li key={review.id} className="border p-4 rounded-lg shadow">
                  <h4 className="font-bold">{review.author}</h4>
                  <p>{review.content}</p>
                  <p className="text-yellow-500">Rating: {review.rating} ⭐</p>
                </li>
              ))}
            </ul>
          ) : (
            <p>No reviews yet.</p>
          )}
        </div>

        {/* Tips for Reviewers */}
        <div className="mb-6">
          <button
            onClick={() => setShowTips(!showTips)}
            className="text-red-600 hover:text-red-800 underline mb-2"
          >
            Tips for Reviewers
          </button>
          {showTips && (
            <ul className="pl-4 mb-4 text-sm text-gray-700 space-y-3 animate-fadeIn">
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Be specific about what you liked or disliked.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Provide constructive feedback with examples.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Keep it respectful and honest.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Avoid spoilers when discussing the plot.</span>
              </li>
            </ul>
          )}
        </div>

        {/* Review Form */}
        <div className="space-y-6 mb-4">
          {/* Title Input */}
          <input
            type="text"
            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Title of your review (e.g., 'Great Book!')"
            value={reviewTitle}
            onChange={(e) => setReviewTitle(e.target.value)}
          />

          {/* Rating Stars */}
          <div className="flex items-center space-x-2 mb-4">
            <span className="text-gray-700 font-semibold">Rate this item:</span>
            <div className="flex space-x-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 
                  ${rating === star ? "bg-yellow-500 text-white scale-110" : "bg-gray-300 text-gray-700 hover:bg-yellow-300 hover:scale-105"}`}
                  onClick={() => setRating(star)}
                  aria-label={`Rate ${star} out of 5`}
                >
                  ⭐
                </button>
              ))}
            </div>
          </div>

          {/* Review Content */}
          <textarea
            className="w-full p-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Write your review here (e.g., 'I really enjoyed the character development...')"
            value={reviewContent}
            onChange={(e) => setReviewContent(e.target.value)}
            rows={5}
          />
        </div>

        <div className="flex justify-end">
          <button
            className={`px-6 py-3 bg-blue-600 text-white rounded-lg mr-2 transition-all duration-300 
              ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={submitReview}
            disabled={loading}
          >
            {loading ? (
              <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10" strokeWidth="4"></circle>
                <path d="M4 12a8 8 0 014-6.93" strokeWidth="4"></path>
              </svg>
            ) : (
              "Submit Review"
            )}
          </button>
          <button
            className="px-6 py-3 bg-gray-400 text-gray-800 rounded-lg hover:bg-gray-500 transition-all duration-300"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}









/////bookdetails.tsx
'use client';
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";

interface Book {
  id: string;
  title: string;
  description: string;
  cover_url: string;
  author_name: string[];
  published_year: string;
  price: number;
  discounted_price: number;
  pages: number;
}


export default function BookDetails() {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [showProductDetails, setShowProductDetails] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id]);

  const fetchBookDetails = async (bookId) => {
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      const data = await response.json();
      setBook(mapBookData(data));
    } catch (error) {
      console.error("Failed to fetch book details:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });

  const fetchReviews = async () => {
    try {
      const response = await fetch(`/api/reviews?bookId=${id}`);
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  };

  const calculateAverageRating = (reviews) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
    setTotalReviews(reviews.length);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.title || item.name} {/* Showing book title or list name */}
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
          <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
            <img
              src={book.cover_url}
              alt={book.title}
              className="w-full h-full object-cover transition-transform duration-300 transform group-hover:scale-105"
            />
          </div>
        </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>
  <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-4 rounded-3xl shadow-2xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-4">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">{averageRating.toFixed(1)} out of 5</span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">({totalReviews} reviews)</span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-6 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>
  
  {/* Review Modal */}
  {isReviewModalOpen && (
    <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)} />
  )}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">${book.price}</span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-green-400 to-green-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-green-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-green-500 hover:to-green-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    {isAddedToCart ? "Added to Cart" : "Add to Cart"}
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-red-300 ${
      isAddedToWishlist ? "bg-gray-400 cursor-not-allowed" : "bg-gradient-to-r from-red-500 to-red-700 hover:from-red-600 hover:to-red-800"
    } text-white`}
    disabled={isAddedToWishlist}
  >
    <FaHeart className="inline-block mr-2" /> {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
  </button>
    </div>

          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you're seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you'll be captivated by the author's ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}












/////updated code 


'use client';
import { useEffect, useState,  useCallback } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";
import Image from 'next/image';


export default function BookDetails() {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

   
  const fetchBookDetails = useCallback(async (bookId) => {
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      const data = await response.json();
      setBook(mapBookData(data));
    } catch (error) {
      console.error("Failed to fetch book details:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);
   
  const fetchReviews = useCallback(async () => {
    try {
      const response = await fetch(`/api/reviews?bookId=${id}`);
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  }, [id]);


  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, fetchBookDetails, fetchReviews]);

  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });


  const calculateAverageRating = (reviews) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
    setTotalReviews(reviews.length);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.title || item.name} {/* Showing book title or list name */}
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
          <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
        <Image   
             src={book.cover_url}
             alt={book.title}
             layout="responsive"
             width={500}
             height={750}
             className="w-full h-full object-cover transition-transform duration-300 transform group-hover:scale-105"
/>
          </div>
        </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>

  <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-4 rounded-3xl shadow-2xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-4">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">{averageRating.toFixed(1)} out of 5</span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">({totalReviews} reviews)</span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-6 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 focus:outline-none focus:ring-2 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>
  
  {/* Review Modal */}
  {isReviewModalOpen && (
    <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)} />
  )}
  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">${book.price}</span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-green-400 to-green-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-green-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-green-500 hover:to-green-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    {isAddedToCart ? "Added to Cart" : "Add to Cart"}
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-red-300 ${
      isAddedToWishlist ? "bg-gray-400 cursor-not-allowed" : "bg-gradient-to-r from-red-500 to-red-700 hover:from-red-600 hover:to-red-800"
    } text-white`}
    disabled={isAddedToWishlist}
  >
    <FaHeart className="inline-block mr-2" /> {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
  </button>
    </div>

          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you are seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you will be captivated by the authors ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}










//reviewmodal   




import { useState } from "react";
import StarRating from "./StarRating";

interface Review {
  id: string;
  content: string;
  author: string;
  rating: number;
}

interface ReviewModalProps {
  onClose: () => void;
  reviews: Review[];
  bookId: string;
}

export default function ReviewModal({ onClose, reviews = [], bookId }: ReviewModalProps) {
  const [reviewTitle, setReviewTitle] = useState("");
  const [reviewContent, setReviewContent] = useState("");
  const [rating, setRating] = useState<number | null>(null);
  const [showTips, setShowTips] = useState(false); // State to toggle tips
  const [loading, setLoading] = useState(false);

  const submitReview = async () => {
    if (!reviewTitle || !reviewContent || rating === null) {
      alert("Please provide a title, review, and a rating.");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("/api/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          bookId,
          title: reviewTitle,
          content: reviewContent,
          rating,
        }),
      });

      if (res.ok) {
        alert("Review submitted successfully!");
        setReviewTitle("");
        setReviewContent("");
        setRating(null);
        onClose();
      } else {
        alert("Failed to submit review.");
      }
    } catch (error) {
      console.error("Failed to submit review:", error);
      alert("An error occurred while submitting your review.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-gray-800 bg-opacity-70 z-50 flex justify-center items-center transition-opacity">
      <div className="bg-white p-8 rounded-lg shadow-2xl w-[90%] max-w-2xl transform transition-transform hover:scale-105">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Write Your Review</h2>
        
        <div className="reviews-section mb-6">

  <h2 className="text-xl font-semibold mb-2">Reviews:</h2>
  {reviews.length > 0 ? (
    reviews.map((review) => (
      <div key={review.id} className="review-item mb-4 p-4 border border-gray-200 rounded-md">
        <p className="text-gray-800">{review.content}</p>
        <p className="text-gray-600 text-sm">- {review.author}</p>
        <StarRating rating={review.rating} />
      </div>
    ))
  ) : (
    <p className="text-gray-500">No reviews yet.</p>
  )}
</div>



        {/* Tips for Reviewers */}
        <div className="mb-6">
          <button
            onClick={() => setShowTips(!showTips)}
            className="text-red-600 hover:text-red-800 underline mb-2"
          >
            Tips for Reviewers
          </button>
          {showTips && (
            <ul className="pl-4 mb-4 text-sm text-gray-700 space-y-3 animate-fadeIn">
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Be specific about what you liked or disliked.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Provide constructive feedback with examples.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Keep it respectful and honest.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Avoid spoilers when discussing the plot.</span>
              </li>
            </ul>
          )}
        </div>

        {/* Review Form */}
        <div className="space-y-6 mb-4">
          {/* Title Input */}
          <input
            type="text"
            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Title of your review (e.g., 'Great Book!')"
            value={reviewTitle}
            onChange={(e) => setReviewTitle(e.target.value)}
          />

          {/* Rating Stars */}
          <div className="flex items-center space-x-2 mb-4">
            <span className="text-gray-700 font-semibold">Rate this item:</span>
            <div className="flex space-x-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 
                  ${rating === star ? "bg-yellow-500 text-white scale-110" : "bg-gray-300 text-gray-700 hover:bg-yellow-300 hover:scale-105"}`}
                  onClick={() => setRating(star)}
                  aria-label={`Rate ${star} out of 5`}
                >
                  ⭐
                </button>
              ))}
            </div>
          </div>

          {/* Review Content */}
          <textarea
            className="w-full p-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Write your review here (e.g., 'I really enjoyed the character development...')"
            value={reviewContent}
            onChange={(e) => setReviewContent(e.target.value)}
            rows={5}
          />
        </div>

        <div className="flex justify-end">
          <button
            className={`px-6 py-3 bg-blue-600 text-white rounded-lg mr-2 transition-all duration-300 
              ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={submitReview}
            disabled={loading}
          >
            {loading ? (
              <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10" strokeWidth="4"></circle>
                <path d="M4 12a8 8 0 014-6.93" strokeWidth="4"></path>
              </svg>
            ) : (
              "Submit Review"
            )}
          </button>
          <button
            className="px-6 py-3 bg-gray-400 text-gray-800 rounded-lg hover:bg-gray-500 transition-all duration-300"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}










// pages/api/auth/login.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { sign } from 'jsonwebtoken';

interface User {
  email: string;
  password: string;
  name: string; // Ensure your user object includes a name property
}

// Mock user database (for demonstration purposes)
const users: User[] = [
  { email: 'user@example.com', password: 'password123', name: 'John Doe' }, // Replace with your actual user data
];

// Replace with your actual authentication logic
const authenticateUser = (email: string, password: string): User | null => {
  return users.find(user => user.email === email && user.password === password) || null;
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const { email, password } = req.body;

    // Authenticate user
    const user = authenticateUser(email, password);

    if (user) {
      // Generate a token if the user is valid
      const token = sign({ email: user.email }, process.env.JWT_SECRET, { expiresIn: '1h' });

      // Return token and user information
      return res.status(200).json({ token, user: { name: user.name, email: user.email } }); // Adjust user info accordingly
    } else {
      return res.status(401).json({ message: 'Invalid credentials' }); // Handle invalid credentials
    }
  }

  res.setHeader('Allow', ['POST']);
  res.status(405).end(`Method ${req.method} Not Allowed`);
}








books.ts

import axios from 'axios';

export default async function handler(req, res) {
  const { category, title, author } = req.query;

  // Build the query string dynamically based on available parameters
  let query = '';

  if (title) {
    query += `intitle:${encodeURIComponent(title)}`;  // Search by title, URL-encoded
  }
  if (author) {
    query += (query ? '+' : '') + `inauthor:${encodeURIComponent(author)}`;  // Search by author, URL-encoded, and add '+' if other queries exist
  }
  if (!query) {
    query = category ? encodeURIComponent(category) : 'fiction';  // Default to 'fiction' if no specific query is provided
  }

  const googleBooksUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;

  try {
    const response = await axios.get(googleBooksUrl);
    res.status(200).json(response.data);
  } catch (error) {
    console.error('Error fetching books from Google Books API:', error.response?.data || error.message);
    res.status(500).json({ message: 'Failed to fetch books', error: error.response?.data || error.message });
  }
}



componenet/books.


import type { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { category, title, author } = req.query;

  // Build the query string dynamically based on available parameters
  let query = '';

  if (title) {
    query += `intitle:${encodeURIComponent(title as string)}`;  // Type assertion to string
  }
  if (author) {
    query += (query ? '+' : '') + `inauthor:${encodeURIComponent(author as string)}`;
  }
  if (!query) {
    query = category ? encodeURIComponent(category as string) : 'fiction';
  }

  const googleBooksUrl = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`;

  try {
    const response = await axios.get(googleBooksUrl);
    res.status(200).json(response.data);
  } catch (error: any) {
    console.error('Error fetching books from Google Books API:', error.response?.data || error.message);
    res.status(500).json({ message: 'Failed to fetch books', error: error.response?.data || error.message });
  }
}
















pages/api/reviews.ts
import { NextApiRequest, NextApiResponse } from "next";
import dbConnect from "@/app/utils/dbConnect";
import mongoose from "mongoose";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  await dbConnect(); // Establish MongoDB connection

  const db = mongoose.connection.db; // Get the MongoDB database instance

  if (req.method === "GET") {
    const { bookId } = req.query;
    const reviews = await db.collection("reviews").find({ bookId }).toArray();
    return res.status(200).json(reviews);
  }

  if (req.method === "POST") {
    const { bookId, content, rating } = req.body;
    const newReview = {
      bookId,
      content,
      author: "Anonymous", // Replace with authenticated user's name if available
      rating,
    };
    await db.collection("reviews").insertOne(newReview);
    return res.status(201).json(newReview);
  }

  return res.status(405).end(); // Method Not Allowed
}






//reviews/[bookId]
import dbConnect from "@/app/utils/dbConnect";

export default async function handler(req, res) {
  const { bookId } = req.query;
  const { db } = await dbConnect();

  if (req.method === "GET") {
    try {
      const reviews = await db.collection("reviews").find({ bookId }).toArray();
      return res.status(200).json({ reviews });
    } catch (error) {
      return res.status(500).json({ message: "Internal Server Error" });
    }
  }

  if (req.method === "POST") {
    const { user, comment, rating } = req.body;

    // Validate incoming data
    if (!user || !comment || rating === undefined) {
      return res.status(400).json({ message: "All fields are required." });
    }

    try {
      const newReview = { bookId, user, comment, rating };
      await db.collection("reviews").insertOne(newReview);
      return res.status(201).json(newReview);
    } catch (error) {
      return res.status(500).json({ message: "Internal Server Error" });
    }
  }

  // Handle other HTTP methods
  return res.status(405).json({ message: "Method Not Allowed" });
}














api/featured books.ts

import type { NextApiRequest, NextApiResponse } from 'next';

// Define interfaces for the expected structure of the book data
interface VolumeInfo {
  title: string;
  authors?: string[];
  imageLinks?: {
    thumbnail?: string;
  };
  averageRating?: number;
  publishedDate?: string;
  description?: string;
}

interface BookItem {
  id: string;
  volumeInfo: VolumeInfo;
}

interface ApiResponse {
  items?: BookItem[];
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY;
  const query = 'technology'; // Modify this query as needed for your featured section
  const BASE_URL = `https://www.googleapis.com/books/v1/volumes?q=${query}&key=${apiKey}`;

  try {
    const response = await fetch(BASE_URL);

    // Check for any API response errors
    if (!response.ok) {
      throw new Error('Failed to fetch data from Google Books API');
    }

    const data: ApiResponse = await response.json(); // Type the response

    if (!data.items || data.items.length === 0) {
      // Handle the case where no books are returned
      return res.status(404).json({ error: 'No books found' });
    }

    // Map through the items and use the defined structure
    const books = data.items.map((item) => ({
      id: item.id,
      title: item.volumeInfo.title || 'No Title Available',
      cover_url: item.volumeInfo.imageLinks?.thumbnail || '/placeholder.jpg',
      author_name: item.volumeInfo.authors || ['Unknown Author'],
      public_rating: item.volumeInfo.averageRating?.toString() || 'Not Available',
      published_year: item.volumeInfo.publishedDate?.split('-')[0] || 'Not Available',
      description: item.volumeInfo.description || 'No description available',
    }));

    // Send a JSON response with the books array
    res.status(200).json({ items: books });
  } catch (error) {
    console.error('Error fetching data:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}







pages/api/save-orders.ts



// pages/api/save-order.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '@/app/utils/dbConnect';
import Order from '@/app/models/Orders';

// Define the interface for the line item
interface LineItem {
  name: string;
  price: number;
  quantity: number;
  image?: string;
}

// Define the structure of the request body
interface SaveOrderRequestBody {
  date: string;
  status: string;
  line_items: LineItem[];
  stripeSessionId: string;
  userId: string;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    await dbConnect();

    // Type the request body using the defined interface
    const { date, status, line_items, stripeSessionId, userId }: SaveOrderRequestBody = req.body;

    if (!date || !status || !line_items || !stripeSessionId || !userId) {
      return res.status(400).json({ message: 'Missing required order information.' });
    }

    try {
      // Create the order object
      const newOrder = new Order({
        date,
        status,
        stripeSessionId,
        items: line_items.map((item) => ({
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          image: item.image || '',
        })),
      });

      await newOrder.save();
      res.status(201).json({ message: 'Order saved successfully', order: newOrder });
    } catch (error) {
      console.error('Error saving order:', error);
      res.status(500).json({ message: 'Failed to save order', error: error.message });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}











// pages/api/user.ts
import { NextApiRequest, NextApiResponse } from 'next';
import jwt from 'jsonwebtoken';

const secretKey = process.env.JWT_SECRET; // Ensure you have a secret for JWT

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    try {
      const decoded = jwt.verify(token, secretKey);
      // Here you can fetch user data from your database using decoded.userId
      const userData = {
        name: decoded.name,
        email: decoded.email,
        // Add other user fields as necessary
      };

      return res.status(200).json(userData);
    } catch (error) {
      return res.status(401).json({ message: 'Invalid token' });
    }
  }

  res.setHeader('Allow', ['GET']);
  res.status(405).end(`Method ${req.method} Not Allowed`);
}







// pages/api/wishlist.ts
import { NextApiRequest, NextApiResponse } from 'next';
import dbConnect from '@/app/utils/dbConnect';
import Wishlist from '@/app/models/wishlist';
import { getSession } from 'next-auth/react';

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  await dbConnect();
  const session = await getSession({ req });
  if (!session) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  const userId = session.user.id; // Adjust based on how you're storing user ID in session

  switch (req.method) {
    case 'GET':
      const wishlist = await Wishlist.findOne({ userId });
      return res.status(200).json({ bookIds: wishlist ? wishlist.bookIds : [] });

    case 'POST':
      // Add a book to the wishlist
      const { bookId } = req.body;
      await Wishlist.findOneAndUpdate(
        { userId },
        { $addToSet: { bookIds: bookId } }, // Add bookId if it doesn't exist
        { upsert: true, new: true }
      );
      return res.status(200).json({ message: 'Book added to wishlist' });

    case 'DELETE':
      // Remove a book from the wishlist
      const { bookIdToRemove } = req.body;
      await Wishlist.findOneAndUpdate(
        { userId },
        { $pull: { bookIds: bookIdToRemove } }, // Remove bookId
        { new: true }
      );
      return res.status(200).json({ message: 'Book removed from wishlist' });

    default:
      return res.status(405).json({ message: 'Method not allowed' });
  }
};

export default handler;







remove.ts

import { getSession } from 'next-auth/react';
import Wishlist from '@/app/models/wishlist';
import dbConnect from '@/app/utils/dbConnect';

export default async function handler(req, res) {
  const session = await getSession({ req });
  if (!session) return res.status(401).json({ message: 'Unauthorized' });

  const { bookId } = req.body;
  await dbConnect();

  const wishlist = await Wishlist.findOneAndUpdate(
    { userId: session.user.id },
    { $pull: { books: bookId } }, // Remove bookId from wishlist
    { new: true }
  );

  res.status(200).json(wishlist);
}









acccount/page.tsx

'use client';
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { FaUser, FaEnvelope, FaEdit, FaSave, FaTimes } from 'react-icons/fa';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AccountPage: React.FC = () => {
  const router = useRouter();
  const [userData, setUserData] = useState<{ name: string; email: string } | null>(null);
  const [loading, setLoading] = useState(true);
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState<{ name: string; email: string }>({ name: '', email: '' });

  // Prevent scrolling
  useEffect(() => {
    document.body.style.overflow = 'hidden'; // Disable scrolling on the body

    const token = localStorage.getItem('jwtToken');
    if (!token) {
      router.push('/');
      return;
    }

    const fetchUserData = async () => {
      const response = await fetch('/api/user', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setUserData(data);
        setFormData({ name: data.name, email: data.email });
      } else {
        console.error('Failed to fetch user data');
        router.push('/');
      }
      setLoading(false);
    };

    fetchUserData();

    return () => {
      document.body.style.overflow = 'auto'; // Re-enable scrolling when component unmounts
    };
  }, [router]);

  const handleEditToggle = () => {
    setEditing(!editing);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    const token = localStorage.getItem('jwtToken');
    const response = await fetch('/api/user/update', {
      method: 'PUT',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData),
    });

    if (response.ok) {
      const updatedData = await response.json();
      setUserData(updatedData);
      setEditing(false);
      toast.success('Profile updated successfully!');
    } else {
      console.error('Failed to update user data');
      toast.error('Failed to update profile. Please try again.');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-green-200 to-blue-200">
        <div className="loader"></div>
      </div>
    );
  }

  return (  
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-gray-200 to-gray-100">
      <div className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full">
        <h1 className="text-3xl font-semibold text-gray-800 mb-4">Account Settings</h1>
        <div className="space-y-4">
          <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow hover:bg-gray-200 transition duration-200">
            <FaUser className="text-blue-600 mr-3" />
            {editing ? (
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                placeholder="Enter your name"
                className="text-lg font-medium text-gray-800 w-full bg-gray-100 outline-none"
              />
            ) : (
              <p className="text-lg font-medium text-gray-800">{userData.name}</p>
            )}
          </div>

          <div className="flex items-center bg-gray-100 p-4 rounded-lg shadow hover:bg-gray-200 transition duration-200">
            <FaEnvelope className="text-blue-600 mr-3" />
            {editing ? (
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="Enter your email"
                className="text-lg font-medium text-gray-800 w-full bg-gray-100 outline-none"
              />
            ) : (
              <p className="text-lg font-medium text-gray-800">{userData.email}</p>
            )}
          </div>
        </div>
        <div className="mt-6 flex justify-between">
          {editing ? (
            <>
              <button
                className="flex items-center justify-center text-white bg-blue-600 hover:bg-blue-700 rounded-lg px-4 py-2 transition duration-200"
                onClick={handleSave}
              >
                <FaSave className="mr-2" /> Save Changes
              </button>
              <button
                className="flex items-center justify-center text-white bg-red-600 hover:bg-red-700 rounded-lg px-4 py-2 transition duration-200"
                onClick={handleEditToggle}
              >
                <FaTimes className="mr-2" /> Cancel
              </button>
            </>
          ) : (
            <button
              className="flex items-center justify-center text-white bg-blue-600 hover:bg-blue-700 rounded-lg px-4 py-2 transition duration-200"
              onClick={handleEditToggle}
            >
              <FaEdit className="mr-2" /> Edit Profile
            </button>
          )}
        </div>
      </div>
      <ToastContainer />
    </div>
  );
};

export default AccountPage;








bestsellles.tsx


import Link from 'next/link';
import { useEffect, useState, useRef } from 'react';
import BookCard from './BookCard';
import { Book } from '../types';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';
import Skeleton from './Skeleton'; // Import your Skeleton component

const Bestsellers = () => {
  const [bestsellers, setBestsellers] = useState<Book[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const fetchBestsellers = async () => {
      try {
        const response = await fetch('/api/bestsellers');
        const data = await response.json();
        setBestsellers(data);
      } catch (error) {
        console.error('Error fetching bestsellers:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchBestsellers();
  }, []);

  const scrollRight = () => {
    scrollContainerRef.current?.scrollBy({ left: 300, behavior: 'smooth' });
  };

  const scrollLeft = () => {
    scrollContainerRef.current?.scrollBy({ left: -300, behavior: 'smooth' });
  };

  // If loading, show skeletons
  if (loading) {
    return (
      <section className="my-12 px-4 lg:py-10 bg-white text-gray-800"> 
        <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-600 leading-tight">
          Our <span className="text-gray-600">Bestsellers</span>
        </h2>
        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide">
          {Array.from({ length: 5 }).map((_, index) => (
            <div key={index} className="min-w-[220px] max-w-[220px]">
              <Skeleton />
            </div>
          ))}
        </div>
      </section>
    );
  }

  if (bestsellers.length === 0) {
    return <div className="text-center text-gray-600">No bestsellers found</div>;
  }

  return (
    <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800"> {/* Adjusted padding */}
      {/* Main Heading */}
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        Our <span className="text-gray-600">Bestsellers</span>
      </h2>

      {/* Scrolling book list with left/right scroll buttons */}
      <div className="relative flex items-center justify-center mt-6">
        {/* Left scroll button */}
        <button
          className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollLeft}
        >
          <ChevronLeftIcon className="h-6 w-6" />
        </button>

        {/* Scrolling container */}
        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide" ref={scrollContainerRef}>
          {bestsellers.map((book) => (
            <Link key={book.id} href={`/details/${book.id}`}>
              <div className="min-w-[220px] max-w-[220px] snap-start shrink-0 cursor-pointer transition-transform duration-300 hover:scale-105 transform-gpu bg-white rounded-lg overflow-hidden">
                <BookCard book={book} />
              </div>
            </Link>
          ))}
        </div>

        {/* Right scroll button */}
        <button
          className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollRight}
        >
          <ChevronRightIcon className="h-6 w-6" />
        </button>
      </div>
    </section>
  );
};

export default Bestsellers;






updated code   
import Link from 'next/link';
import { useEffect, useState, useRef } from 'react';
import BookCard from './BookCard';
import { Book } from '../types';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';
import Skeleton from './Skeleton'; // Import your Skeleton component

const Bestsellers = () => {
  const [bestsellers, setBestsellers] = useState<Book[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const fetchBestsellers = async () => {
      try {
        const response = await fetch('/api/bestsellers');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setBestsellers(data);
      } catch (error) {
        console.error('Error fetching bestsellers:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchBestsellers();
  }, []);

  const scrollRight = () => {
    scrollContainerRef.current?.scrollBy({ left: 300, behavior: 'smooth' });
  };

  const scrollLeft = () => {
    scrollContainerRef.current?.scrollBy({ left: -300, behavior: 'smooth' });
  };

  // If loading, show skeletons
  if (loading) {
    return (
      <section className="my-12 px-4 lg:py-10 bg-white text-gray-800"> 
        <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-600 leading-tight">
          Our <span className="text-gray-600">Bestsellers</span>
        </h2>
        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide">
          {/* Display multiple Skeleton components for loading state */}
          {Array.from({ length: 5 }).map((_, index) => (
            <div key={index} className="min-w-[220px] max-w-[220px]">
              <Skeleton count={1} /> {/* Assuming Skeleton takes count prop for each item */}
            </div>
          ))}
        </div>
      </section>
    );
  }

  if (bestsellers.length === 0) {
    return <div className="text-center text-gray-600">No bestsellers found</div>;
  }

  return (
    <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800"> {/* Adjusted padding */}
      {/* Main Heading */}
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        Our <span className="text-gray-600">Bestsellers</span>
      </h2>

      {/* Scrolling book list with left/right scroll buttons */}
      <div className="relative flex items-center justify-center mt-6">
        {/* Left scroll button */}
        <button
          className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollLeft}
        >
          <ChevronLeftIcon className="h-6 w-6" />
        </button>

        {/* Scrolling container */}
        <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide" ref={scrollContainerRef}>
          {bestsellers.map((book) => (
            <Link key={book.id} href={`/details/${book.id}`}>
              <div className="min-w-[220px] max-w-[220px] snap-start shrink-0 cursor-pointer transition-transform duration-300 hover:scale-105 transform-gpu bg-white rounded-lg overflow-hidden">
                <BookCard book={book} />
              </div>
            </Link>
          ))}
        </div>

        {/* Right scroll button */}
        <button
          className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
          onClick={scrollRight}
        >
          <ChevronRightIcon className="h-6 w-6" />
        </button>
      </div>
    </section>
  );
};

export default Bestsellers;
  





import Image from 'next/image';
import Link from 'next/link';

interface Book {
  id: string;
  title: string;
  author: string; // Added the author field for display
  cover_url: string;
}

interface BookCardProps {
  book: Book;
}

const BookCard: React.FC<BookCardProps> = ({ book }) => {
  return (
    <div className="relative max-w-full sm:max-w-xs bg-white bg-opacity-80 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-2 overflow-hidden border border-gray-200 hover:border-gray-400">
      <Link href={`/details/${book.id}`} className="block group">
        {/* Book Cover Section */}
        <div className="h-64 relative overflow-hidden rounded-t-xl">
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-700 ease-out group-hover:scale-105 group-hover:brightness-90"
          />
        </div>

        {/* Book Title and Author Section */}
        <div className="p-4 text-center">
          <h3 className="text-lg sm:text-xl font-semibold text-gray-800 truncate transition-colors duration-300 group-hover:text-indigo-500">
            {book.title}
          </h3>
          <p className="text-sm sm:text-md text-gray-600 group-hover:text-gray-700 transition-colors duration-300">
            {book.author}
          </p>
        </div>
      </Link>

      {/* "View Details" Button (Appears on Hover) */}
      <div className="absolute inset-0 bg-gradient-to-t from-gray-800 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out flex flex-col justify-end p-4">
        <div className="flex justify-center space-x-4">
          <Link href={`/details/${book.id}`}>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-800 hover:text-gray-900 text-sm font-semibold py-2 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105">
              View Details
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default BookCard;





books.tsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Image from 'next/image';

interface Book {
  id: string;
  title: string;
  authors?: string[];
  publishedDate?: string;
  description?: string;
  thumbnail?: string;
}

const Books: React.FC = () => {
  const [books, setBooks] = useState<Book[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const response = await axios.get<{ items: Book[] }>('/api/books');
        const fetchedBooks = response.data.items.map(item => ({
          id: item.id,
          title: item.volumeInfo.title,
          authors: item.volumeInfo.authors,
          publishedDate: item.volumeInfo.publishedDate,
          description: item.volumeInfo.description,
          thumbnail: item.volumeInfo.imageLinks?.thumbnail,
        }));
        setBooks(fetchedBooks);
      } catch (err) {
        setError('Failed to fetch books');
        console.error(err);
      }
    };

    fetchBooks();
  }, []);

  return (
    <div>
      {error && <p>{error}</p>}
      {books.map((book) => (
        <div key={book.id} className="book-card">
          <h2>{book.title}</h2>
          {book.authors && <p>By: {book.authors.join(', ')}</p>}
          {book.publishedDate && <p>Published: {book.publishedDate}</p>}
          {book.thumbnail ? (
            <Image
              src={book.thumbnail}
              alt={book.title}
              width={128} // Set a reasonable width
              height={192} // Set a reasonable height
              layout="fixed" // Optional: Use "responsive" if you want responsive sizing
              priority // Optional: Improves loading for important images
            />
          ) : (
            <p>No image available</p>
          )}
          <p>{book.description}</p>
        </div>
      ))}
    </div>
  );
};

export default Books;

             








import React, { forwardRef, useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export const ContactUs = forwardRef((props, ref) => {
   const [isSubmitting, setIsSubmitting] = useState(false);

   const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
      event.preventDefault();
      setIsSubmitting(true);

      setTimeout(() => {
         setIsSubmitting(false);
         toast.success('Thank you for your message! We will get back to you soon.', {
            position: 'top-center',
            autoClose: 5000,
         });
      }, 1500);
   };

   return (
      <section
         ref={ref}
         id="contact"
         className="flex flex-col items-center py-16 px-6 bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 transition-colors duration-500"
      >
         <ToastContainer />
         <h2 className="text-4xl lg:text-5xl font-bold mb-8 text-center text-green-800 leading-snug">
            We&apos;d Love to Hear from You!
         </h2>
         
         <div className="flex flex-col lg:flex-row items-center w-full max-w-5xl space-y-8 lg:space-y-0 lg:space-x-10">
            {/* Information Section */}
            <div className="lg:w-1/2 flex flex-col items-center lg:items-start space-y-6 px-6 text-center lg:text-left">
               <p className="text-lg lg:text-xl leading-relaxed text-gray-700">
                  Whether you have a question about our bookstore, need assistance, or just want to chat about books, we&apos;re here for you!
               </p>
               <div>
                  <h3 className="text-lg font-semibold text-green-700">Our Location</h3>
                  <p className="text-sm text-gray-600">123 Book Street, Booktown, BK 12345</p>
               </div>
               <div>
                  <h3 className="text-lg font-semibold text-green-700">Contact Information</h3>
                  <p className="text-sm">
                     Email: <a href="mailto:support@abakarreads.com" className="text-green-600 hover:text-green-800">support@abakarreads.com</a>
                  </p>
                  <p className="text-sm">
                     Phone: <a href="tel:+123456789" className="text-green-600 hover:text-green-800">+123-456-789</a>
                  </p>
               </div>
            </div>

            {/* Contact Form */}
            <div className="lg:w-1/2 w-full px-6">
               <form
                  onSubmit={handleSubmit}
                  className="bg-white rounded-3xl shadow-xl p-8 space-y-6 text-gray-800 hover:shadow-2xl transition-shadow duration-300"
               >
                  <div>
                     <label className="block text-base font-medium mb-2 text-gray-700">Name</label>
                     <input
                        type="text"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 transition ease-in-out duration-200"
                        placeholder="Your Name"
                        required
                     />
                  </div>
                  <div>
                     <label className="block text-base font-medium mb-2 text-gray-700">Email</label>
                     <input
                        type="email"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 transition ease-in-out duration-200"
                        placeholder="Your Email"
                        required
                     />
                  </div>
                  <div>
                     <label className="block text-base font-medium mb-2 text-gray-700">Message</label>
                     <textarea
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400 transition ease-in-out duration-200"
                        rows="5"
                        placeholder="Your Message"
                        required
                     ></textarea>
                  </div>
                  <button
                     type="submit"
                     className={`w-full bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 transition-all duration-200 ${
                        isSubmitting && 'cursor-wait'
                     }`}
                     disabled={isSubmitting}
                  >
                     {isSubmitting ? (
                        <span className="loader h-4 w-4 border-2 border-t-transparent border-white rounded-full animate-spin inline-block"></span>
                     ) : (
                        'Send Message'
                     )}
                  </button>
               </form>
            </div>
         </div>
      </section>
   );
});

ContactUs.displayName = 'ContactUs';








import { useEffect, useState, useMemo } from 'react';
import BookCard from './BookCard';
import Pagination from './Pagination';
import Skeleton from './Skeleton';

interface Book {
  id: string;
  volumeInfo: {
    title: string;
    imageLinks?: {
      thumbnail: string;
    };
  };
}

interface ExploreBooksProps {
  category: string | null;
  searchTerm: string;
}

const ExploreBooks: React.FC<ExploreBooksProps> = ({ category, searchTerm }) => {
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);

  useEffect(() => {
    const fetchBooks = async () => {
      setLoading(true);
      try {
        const query = category
          ? `category=${category}`
          : searchTerm
          ? `title=${searchTerm}`
          : 'bestsellers';

        const response = await fetch(`/api/books?${query}&page=${currentPage}&limit=12`);
        const data = await response.json();

        setBooks(data.items ?? []);
        setTotalPages(Math.ceil(data.totalItems / 12));
        setLoading(false);
      } catch (error) {
        console.error('Error fetching books:', error);
        setError('Failed to load books');
        setLoading(false);
      }
    };

    fetchBooks();
  }, [category, searchTerm, currentPage]);

  useEffect(() => {
    const exploreBooksSection = document.getElementById('explore-books');
    if (exploreBooksSection) {
      exploreBooksSection.scrollIntoView({ behavior: 'smooth' });
    }
  }, [currentPage]);

  const cachedBooks = useMemo(() => books, [books]);

  if (loading) {
    return (
      <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
        <Skeleton count={12} />
      </section>
    );
  }

  if (error) {
    return <div className="text-center mt-20 text-red-500">{error}</div>;
  }

  return (
    <section id="explore-books" className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        {category ? `${category} Books 2025` : searchTerm ? `Results for "${searchTerm}"` : 'Explore Popular Books'}
      </h2>

      <p className="text-lg lg:text-xl text-gray-600 mb-6 text-left leading-relaxed">
        {category || searchTerm ? 'Discover top-rated books.' : 'Check out the most popular books right now.'}
      </p>

      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
        {cachedBooks.length > 0 ? (
          cachedBooks.map((book) => (
            <div key={book.id} className="min-w-[220px] max-w-[220px] group relative transform transition-transform duration-300 hover:scale-105 rounded-lg overflow-hidden">
              <BookCard
                book={{
                  id: book.id,
                  title: book.volumeInfo.title,
                  cover_url: book.volumeInfo.imageLinks?.thumbnail || '/default-book-cover.jpg',
                }}
              />
            </div>
          ))
        ) : (
          <p className="text-center text-gray-500 col-span-full">No books found.</p>
        )}
      </div>

      <div className="flex justify-center mt-12">
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
      </div>
    </section>
  );
};

export default ExploreBooks;







///featured books

'use client';
import { useEffect, useState, useRef } from 'react';
import { ChevronRightIcon, ChevronLeftIcon } from '@heroicons/react/24/solid';
import BookCard from './BookCard';
import Link from 'next/link';

interface Book {
  id: string;
  title: string;
  cover_url: string;
  author_name: string[];
  public_rating: string;
  published_year: string;
  description: string;
  price: number;
}

export default function FeaturedBooks() {
  const [books, setBooks] = useState<Book[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const fetchBooks = async () => {
      try {
        const res = await fetch('/api/featured-books');
        const data = await res.json();
        if (data.items && Array.isArray(data.items)) {
          setBooks(data.items);
        } else {
          console.error('Unexpected data format:', data);
        }
      } catch (error) {
        console.error('Failed to fetch books:', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchBooks();
  }, []);

  const scrollRight = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: 300,
        behavior: 'smooth',
      });
    }
  };

  const scrollLeft = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollBy({
        left: -300,
        behavior: 'smooth',
      });
    }
  };

  return (
    <section id='featured' className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
      {/* Main Heading */}
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        Signed $ <span className="text-gray-600">Special Editions</span>
      </h2>

      {isLoading ? (
        <div className="flex justify-center items-center py-10">
          <div className="border-t-4 border-b-4 border-blue-600 rounded-full w-12 h-12 animate-spin" />
        </div>
      ) : (
        <div className="relative flex items-center justify-center mt-6">
          {/* Scroll Left Button */}
          <button
            className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
            onClick={scrollLeft}
            aria-label="Scroll left"
          >
            <ChevronLeftIcon className="h-6 w-6" />
          </button>

          {/* Book Cards */}
          <div className="flex space-x-6 overflow-x-auto py-6 scrollbar-hide" ref={scrollContainerRef}>
            {books.map((book) => (
              <Link key={book.id} href={`/details/${book.id}`}>
                <div className="min-w-[240px] max-w-[240px] snap-start shrink-0 cursor-pointer transition-transform duration-300 hover:scale-105 transform-gpu bg-white rounded-lg overflow-hidden">
                  <BookCard
                    book={{
                      id: book.id,
                      title: book.title,
                      cover_url: book.cover_url,
                    }}
                  />
                </div>
              </Link>
            ))}
          </div>

          {/* Scroll Right Button */}
          <button
            className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-green-600 text-white p-3 rounded-full focus:outline-none z-10 transition-transform duration-300 ease-in-out hover:scale-110 hover:bg-green-700"
            onClick={scrollRight}
            aria-label="Scroll right"
          >
            <ChevronRightIcon className="h-6 w-6" />
          </button>
        </div>
      )}
    </section>
  );
}






import Image from 'next/image';
import Link from 'next/link';

interface Book {
  id: string;
  title: string;
  author: string; // Added the author field for display
  cover_url: string;
}

interface BookCardProps {
  book: Book;
}

const BookCard: React.FC<BookCardProps> = ({ book }) => {
  return (
    <div className="relative max-w-full sm:max-w-xs bg-white bg-opacity-80 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-2 overflow-hidden border border-gray-200 hover:border-gray-400">
      <Link href={`/details/${book.id}`} className="block group">
        {/* Book Cover Section */}
        <div className="h-64 relative overflow-hidden rounded-t-xl">
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-700 ease-out group-hover:scale-105 group-hover:brightness-90"
          />
        </div>

        {/* Book Title and Author Section */}
        <div className="p-4 text-center">
          <h3 className="text-lg sm:text-xl font-semibold text-gray-800 truncate transition-colors duration-300 group-hover:text-indigo-500">
            {book.title}
          </h3>
          <p className="text-sm sm:text-md text-gray-600 group-hover:text-gray-700 transition-colors duration-300">
            {book.author}
          </p>
        </div>
      </Link>

      {/* "View Details" Button (Appears on Hover) */}
      <div className="absolute inset-0 bg-gradient-to-t from-gray-800 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out flex flex-col justify-end p-4">
        <div className="flex justify-center space-x-4">
          <Link href={`/details/${book.id}`}>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-800 hover:text-gray-900 text-sm font-semibold py-2 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105">
              View Details
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default BookCard;










componnenet/reviewmodl

import { useState } from "react";
import StarRating from "./StarRating";

interface Review {
  id: string;
  content: string;
  author: string;
  rating: number;
}

interface ReviewModalProps {
  onClose: () => void;
  reviews: Review[];
  bookId: string;
}

export default function ReviewModal({ onClose, reviews = [], bookId }: ReviewModalProps) {
  const [reviewTitle, setReviewTitle] = useState("");
  const [reviewContent, setReviewContent] = useState("");
  const [rating, setRating] = useState<number | null>(null);
  const [showTips, setShowTips] = useState(false); // State to toggle tips
  const [loading, setLoading] = useState(false);

  const submitReview = async () => {
    if (!reviewTitle || !reviewContent || rating === null) {
      alert("Please provide a title, review, and a rating.");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("/api/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          bookId,
          title: reviewTitle,
          content: reviewContent,
          rating,
        }),
      });

      if (res.ok) {
        alert("Review submitted successfully!");
        setReviewTitle("");
        setReviewContent("");
        setRating(null);
        onClose();
      } else {
        alert("Failed to submit review.");
      }
    } catch (error) {
      console.error("Failed to submit review:", error);
      alert("An error occurred while submitting your review.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-gray-800 bg-opacity-70 z-50 flex justify-center items-center transition-opacity">
      <div className="bg-white p-8 rounded-lg shadow-2xl w-[90%] max-w-2xl transform transition-transform hover:scale-105">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Write Your Review</h2>

        <div className="reviews-section">
  <h2 className="text-xl font-semibold mb-2">Reviews:</h2>
  {reviews.length > 0 ? (
    reviews.map((review, index) => (
      <div key={index} className="review-item mb-4 p-4 border border-gray-200 rounded-md">
        <p className="text-gray-800">{review.text}</p>
        <StarRating rating={review.rating} />
      </div>
    ))
  ) : (
    <p className="text-gray-500">No reviews yet.</p>
  )}
</div>


        {/* Tips for Reviewers */}
        <div className="mb-6">
          <button
            onClick={() => setShowTips(!showTips)}
            className="text-red-600 hover:text-red-800 underline mb-2"
          >
            Tips for Reviewers
          </button>
          {showTips && (
            <ul className="pl-4 mb-4 text-sm text-gray-700 space-y-3 animate-fadeIn">
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Be specific about what you liked or disliked.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Provide constructive feedback with examples.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Keep it respectful and honest.</span>
              </li>
              <li className="flex items-center space-x-2">
                <span className="text-green-500">✓</span>
                <span>Avoid spoilers when discussing the plot.</span>
              </li>
            </ul>
          )}
        </div>

        {/* Review Form */}
        <div className="space-y-6 mb-4">
          {/* Title Input */}
          <input
            type="text"
            className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Title of your review (e.g., 'Great Book!')"
            value={reviewTitle}
            onChange={(e) => setReviewTitle(e.target.value)}
          />

          {/* Rating Stars */}
          <div className="flex items-center space-x-2 mb-4">
            <span className="text-gray-700 font-semibold">Rate this item:</span>
            <div className="flex space-x-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 
                  ${rating === star ? "bg-yellow-500 text-white scale-110" : "bg-gray-300 text-gray-700 hover:bg-yellow-300 hover:scale-105"}`}
                  onClick={() => setRating(star)}
                  aria-label={`Rate ${star} out of 5`}
                >
                  ⭐
                </button>
              ))}
            </div>
          </div>

          {/* Review Content */}
          <textarea
            className="w-full p-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Write your review here (e.g., 'I really enjoyed the character development...')"
            value={reviewContent}
            onChange={(e) => setReviewContent(e.target.value)}
            rows={5}
          />
        </div>

        <div className="flex justify-end">
          <button
            className={`px-6 py-3 bg-blue-600 text-white rounded-lg mr-2 transition-all duration-300 
              ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={submitReview}
            disabled={loading}
          >
            {loading ? (
              <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <circle cx="12" cy="12" r="10" strokeWidth="4"></circle>
                <path d="M4 12a8 8 0 014-6.93" strokeWidth="4"></path>
              </svg>
            ) : (
              "Submit Review"
            )}
          </button>
          <button
            className="px-6 py-3 bg-green-400 text-gray-800 rounded-lg hover:bg-green-500 transition-all duration-300"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}









// src/app/layout.tsx
'use client';
import './globals.css';
import Navbar from './components/Navbar';
import SessionProvider from './components/SessionProvider';
import FeaturedBooks from './components/FeaturedBooks';
import ExploreBooks from './components/ExploreBooks';
import React, { useState } from 'react';
import { CartProvider } from './context/CartContext';
import { usePathname } from 'next/navigation'; 
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { persistor, store } from '../app/redux/store';
import Footer from './components/Footer';
import Bestsellers from './components/Bestsellers';
import HeroSection from './components/Hero';
import ComingSoon from './components/ComingSoon';
import { WishlistProvider } from './context/WishlistContext';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null); 
  const pathname = usePathname();

  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    setSearchTerm(''); // Clear search term when a category is selected
  };

  const handleSearch = (term: string) => {
    setSearchTerm(term);
    setSelectedCategory(null); // Clear category when searching
  };

  const handleBookSelect = (bookId: string) => {
    setSelectedBookId(bookId); // Set the selected book ID
  };

  const isDetailsPage = pathname.startsWith('/details');

  return (
    <html lang="en">
      <body>
        <SessionProvider>
          <CartProvider>
            <WishlistProvider>
              {!isDetailsPage && (
                <Provider store={store}>
                  <PersistGate loading={null} persistor={persistor}>
                    <div className="pb-14">
                      <Navbar 
                        onSearch={handleSearch} 
                        onCategorySelect={handleCategorySelect} 
                        currentBookId={selectedBookId} 
                      />
                      <main className="flex-grow">{children}</main>
                    </div>
                    <div className='pt-8 mt-8'>
                      <HeroSection />
                    </div>
                    <div>
                      <Bestsellers />
                    </div>
                    <div>
                      <FeaturedBooks onBookSelect={handleBookSelect} />
                    </div>
                    <div className='pt-4 mt-4'>
                      <ComingSoon />
                    </div>
                    <div>
                      <ExploreBooks category={selectedCategory} searchTerm={searchTerm} />
                    </div>
                    <div className='pt-6 mt-6'>
                      <Footer />
                    </div>
                  </PersistGate>
                </Provider>
              )}
              {children}
            </WishlistProvider>
          </CartProvider>
        </SessionProvider>
      </body>
    </html>
  );
}









// eslint-disable-next-line @typescript-eslint/no-unused-vars
'use client';
import { useEffect, useState,  useCallback } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus, FaShoppingCart } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";
import Image from 'next/image';


export default function BookDetails() {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const  setReviews = useState([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

   
  const fetchBookDetails = useCallback(async (bookId) => {
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      const data = await response.json();
      setBook(mapBookData(data));
    } catch (error) {
      console.error("Failed to fetch book details:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);
   
  const fetchReviews = useCallback(async () => {
    try {
      const response = await fetch(`/api/reviews?bookId=${id}`);
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  }, [id, setReviews]);
  


  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, fetchBookDetails, fetchReviews]);

  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });


  const calculateAverageRating = (reviews) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
    setTotalReviews(reviews.length);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.title || item.name} {/* Showing book title or list name */}
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
          <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
        <Image   
             src={book.cover_url}
             alt={book.title}
             layout="responsive"
             width={500}
             height={750}
             className="w-full h-full object-cover transition-transform duration-300 transform group-hover:scale-105"
/>
          </div>
        </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>




          <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-6 rounded-3xl shadow-xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-6">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">
      {averageRating.toFixed(1)} out of 5
    </span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">
      ({totalReviews} reviews)
    </span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-8 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 shadow-md focus:outline-none focus:ring-4 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>

  {/* Review Modal */}
  {isReviewModalOpen && <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)} />}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">
        ${book.price}
      </span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-emerald-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-emerald-600 hover:to-teal-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    <span className="flex items-center justify-center">
      <FaShoppingCart className="mr-2" /> 
      {isAddedToCart ? "Added to Cart" : "Add to Cart"}
    </span>
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-rose-300 ${
      isAddedToWishlist
        ? "bg-gray-400 cursor-not-allowed text-white"
        : "bg-gradient-to-r from-rose-500 to-pink-600 text-white hover:from-rose-600 hover:to-pink-700"
    }`}
    disabled={isAddedToWishlist}
  >
    <span className="flex items-center justify-center">
      <FaHeart className="inline-block mr-2" />
      {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
    </span>
  </button>
</div>





          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you are seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you will be captivated by the authors ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}











/////google books api keys


NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY=AIzaSyAPt7RRIC24xYy9UdQT-3XKBtWuOU-_INw





// eslint-disable-next-line @typescript-eslint/no-unused-vars
'use client';
import { useEffect, useState,  useCallback } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus, FaShoppingCart } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";
import Image from "next/image";

export default function BookDetails() {
  const { id } = useParams() as { id: string };
  const [book, setBook] = useState<Book | null>(null);
  const [isLoading] = useState(false);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

   
  const fetchBookDetails = useCallback(async (bookId: string) => {      
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      
      const data = await response.json();
      const mappedBookData = mapBookData(data); // Ensure this returns a Book object
  
      setBook(mappedBookData);
    } catch (error) {
      console.error("Failed to fetch book details:", error);    
    }
  }, []);
  
  const fetchReviews = useCallback(async () => {
    try {
      const response = await fetch("/api/reviews"); // replace with your actual endpoint
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data: Review[] = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  }, []);

  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, fetchBookDetails, fetchReviews]);


  interface Book {
    id: string;
    title: string;
    description: string;
    cover_url: string;
    author_name: string[];
    published_year: string;
    price: number;
    discounted_price: number;
    pages: number | string;
  }
  type Review = {
    id: number; // replace with the correct type
    rating: number;
    comment: string;
  }
  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });


  const calculateAverageRating = (reviews) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
    setTotalReviews(reviews.length);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.title || item.name} {/* Showing book title or list name */}
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
      <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
        <div className="relative w-full h-72"> {/* Set a fixed height for the image container */}
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill" // Fill the parent container
            objectFit="cover" // Maintain cover style
            className="transition-transform duration-300 transform group-hover:scale-105"
          />
        </div>
      </div>
    </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>

 <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-6 rounded-3xl shadow-xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-6">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">
      {averageRating.toFixed(1)} out of 5
    </span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">
      ({totalReviews} reviews)
    </span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-8 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 shadow-md focus:outline-none focus:ring-4 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>

  {/* Review Modal */}
  {isReviewModalOpen && <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)} />}

  {reviews.map((review) => (
  <div key={review.id}>
    <p>{review.comment}</p>
    <p>Rating: {review.rating}</p>
  </div>
))}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">
        ${book.price}
      </span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-emerald-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-emerald-600 hover:to-teal-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    <span className="flex items-center justify-center">
      <FaShoppingCart className="mr-2" /> 
      {isAddedToCart ? "Added to Cart" : "Add to Cart"}
    </span>
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-rose-300 ${
      isAddedToWishlist
        ? "bg-gray-400 cursor-not-allowed text-white"
        : "bg-gradient-to-r from-rose-500 to-pink-600 text-white hover:from-rose-600 hover:to-pink-700"
    }`}
    disabled={isAddedToWishlist}
  >
    <span className="flex items-center justify-center">
      <FaHeart className="inline-block mr-2" />
      {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
    </span>
  </button>
 </div>
          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you are seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you will be captivated by the authors ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}








  const mapBookData = (data) => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "/default-book-cover.jpg",
    author_name: data.volumeInfo.authors || ["Unknown Author"],
    published_year: data.volumeInfo.publishedDate || "Unknown Year",
    price: 29.99, 
    discounted_price: 19.99, 
    pages: data.volumeInfo.pageCount || "Unknown", 
  });






















  // eslint-disable-next-line @typescript-eslint/no-unused-vars
'use client';
import { useEffect, useState,  useCallback } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus, FaShoppingCart } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";
import Image from "next/image";

export default function BookDetails() {
  const { id } = useParams() as { id: string };
  const [book, setBook] = useState<Book | null>(null);
  const [isLoading] = useState(false);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState<Wishlist[]>([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();

   
  const fetchBookDetails = useCallback(async (bookId: string) => {      
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
      
      const data = await response.json();
      const mappedBookData = mapBookData(data); // Ensure this returns a Book object
  
      setBook(mappedBookData);
    } catch (error) {
      console.error("Failed to fetch book details:", error);    
    }
  }, []);
  
  const fetchReviews = useCallback(async () => {
    try {
      const response = await fetch("/api/reviews"); // replace with your actual endpoint
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data: Review[] = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  }, []);

  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, fetchBookDetails, fetchReviews]);


  interface Book {
    id: string;
    title: string;
    description: string;
    cover_url: string;
    author_name: string[];
    published_year: number;
    price: number;
    discounted_price: number;
    pages?: number;
  }
  type Wishlist = {
    name: string;
    books: (Book | null)[];
  };

  type Review = {
    id: number; // replace with the correct type
    rating: number;
    comment: string;
  }
  interface BookData {
    id: string;
    volumeInfo: {
      title: string;
      description?: string;
      imageLinks?: {
        thumbnail?: string;
      };
      authors?: string[];
      publishedDate?: string;
    };
    saleInfo?: {
      listPrice?: {
        amount: number;
      };
      pageCount?: number; 
    };
  }
  
  const mapBookData = (data: BookData): Book => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "default-cover-url.jpg", // Provide a default cover URL if needed
    author_name: data.volumeInfo.authors || ["Unknown Author"],    
    published_year: parseInt(data.volumeInfo.publishedDate?.split("-")[0] || "0", 10),
    price: data.saleInfo?.listPrice?.amount || 0, // Default to 0 if price is unavailable
    discounted_price: data.saleInfo?.listPrice?.amount || 0, // Use retailPrice or a default
    pages: (data.volumeInfo as { pageCount?: number }).pageCount ?? 0, 
  });
  

  const calculateAverageRating = (reviews: Review[]) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.name || item.name} 
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
      <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
        <div className="relative w-full h-72"> {/* Set a fixed height for the image container */}
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill" // Fill the parent container
            objectFit="cover" // Maintain cover style
            className="transition-transform duration-300 transform group-hover:scale-105"
          />
        </div>
      </div>
    </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>

 <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-6 rounded-3xl shadow-xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-6">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">
      {averageRating.toFixed(1)} out of 5
    </span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">
      ({totalReviews} reviews)
    </span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-8 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 shadow-md focus:outline-none focus:ring-4 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>

  {/* Review Modal */}
  {isReviewModalOpen && <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)}   reviews={reviews as Review[]}/>}

  {reviews.map((review) => (
  <div key={review.id}>
    <p>{review.comment}</p>
    <p>Rating: {review.rating}</p>
  </div>
))}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">
        ${book.price}
      </span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-emerald-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-emerald-600 hover:to-teal-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    <span className="flex items-center justify-center">
      <FaShoppingCart className="mr-2" /> 
      {isAddedToCart ? "Added to Cart" : "Add to Cart"}
    </span>
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-rose-300 ${
      isAddedToWishlist
        ? "bg-gray-400 cursor-not-allowed text-white"
        : "bg-gradient-to-r from-rose-500 to-pink-600 text-white hover:from-rose-600 hover:to-pink-700"
    }`}
    disabled={isAddedToWishlist}
  >
    <span className="flex items-center justify-center">
      <FaHeart className="inline-block mr-2" />
      {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
    </span>
  </button>
 </div>
          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you are seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you will be captivated by the authors ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}






'use client';
import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

// Define TypeScript interfaces
interface LineItem {
  id: string;
  description: string;
  quantity: number;
  amount_total: number;
}

interface OrderDetails {
  id: string;
  amount_total: number;
  line_items: {
    data: LineItem[];
  };
}

const SuccessPage = () => {
  const searchParams = useSearchParams();
  const session_id = searchParams?.get('session_id');
  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const router = useRouter();

  // Prevent scrolling on page load
  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => { 
      document.body.style.overflow = 'auto';
    };
  }, []);

  // Fetch order details and save to history
  useEffect(() => {
    if (session_id) {
      const fetchAndSaveOrder = async () => {
        try {
          const response = await fetch(`/api/get-order-details?session_id=${session_id}`);
          if (!response.ok) throw new Error('Failed to fetch order details');
          
          const data: OrderDetails = await response.json();
          setOrderDetails(data);
          setOrderConfirmed(true);

          // Save order to history
          await fetch('/api/save-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...data, userId: 'sampleUserId' }),
          });
        } catch (error) {
          setError('Unable to load order details');
        } finally {
          setLoading(false);
        }
      };
      fetchAndSaveOrder();
    } else {
      setError('Session ID is missing');
      setLoading(false);
    }
  }, [session_id]);

  // Render loading state
  if (loading) return <p className="text-lg text-gray-700">Loading order details...</p>;

  // Render error state
  if (error) return <p className="text-red-600">{error}</p>;

  // Render success page
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="min-h-screen flex flex-col items-center justify-center mt-16 pt-16 p-4">
        <div className="bg-white shadow-lg p-8 rounded-lg max-w-3xl w-full sm:w-11/12 md:w-3/4 lg:w-full transition transform hover:scale-105">
          <h1 className="text-4xl font-bold mb-6 text-center text-green-600">Order Success!</h1>
          {orderConfirmed && (
            <p className="text-lg text-green-500 mb-4">Your order has been confirmed!</p>
          )}
          {orderDetails ? (
            <div>
              <h2 className="text-2xl font-semibold mb-4">Thank you for your order!</h2>
              <div className="border-t border-gray-200 my-4" />
              <p className="text-lg mb-2"><strong>Order ID:</strong> {orderDetails.id}</p>
              <p className="text-lg mb-4"><strong>Amount Paid:</strong> ${(orderDetails.amount_total / 100).toFixed(2)}</p>
              <h3 className="text-xl font-semibold mb-2">Order Details:</h3>
              <ul className="space-y-4">
                {orderDetails.line_items?.data?.map((item: LineItem) => (
                  <li key={item.id} className="flex justify-between items-center bg-gray-50 p-4 rounded-md shadow-sm transition hover:bg-gray-100">
                    <div>
                      <p className="font-medium">{item.description}</p>
                      <p className="text-sm text-gray-500"><strong>Quantity:</strong> {item.quantity}</p>
                    </div>
                    <p className="text-lg font-semibold">${(item.amount_total / 100).toFixed(2)}</p>
                  </li>
                ))}
              </ul>
              <div className="mt-6 flex space-x-4">
                <button 
                  onClick={() => router.replace('/')} 
                  className="inline-block px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
                >
                  Return to Home
                </button>
              </div>   
            </div>
          ) : (
            <p>Order details not available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default SuccessPage;








  const fetchBookDetails = async (bookId: string) => {
    try {
      const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
      if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);
  
      const data = await response.json();
      const mappedBookData = mapBookData(data); 
  
      console.log(mappedBookData); // Check the console to see if the data mapping is correct
      setBook(mappedBookData);
    } catch (error) {
      console.error("Failed to fetch book details:", error);
    }
  };
  
  
  const fetchReviews = async () => {
    try {
      const response = await fetch("/api/reviews"); // replace with your actual endpoint
      if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);
      const data: Review[] = await response.json();
      setReviews(data);
      calculateAverageRating(data);
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    }
  };
    // Added calculateAverageRating as a dependency
  

  useEffect(() => {
    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, fetchBookDetails, fetchReviews]);










  
// eslint-disable-next-line @typescript-eslint/no-unused-vars
'use client';
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Bestsellers from "@/app/components/Bestsellers";
import ReviewModal from "@/app/components/ReviewModal"; 
import Footer from "@/app/components/Footer";
import StarRating from "@/app/components/StarRating";
import { FaChevronDown, FaHeart, FaPlus, FaMinus, FaShoppingCart } from "react-icons/fa";
import { useCart } from "@/app/context/CartContext";
import Image from "next/image";

export default function BookDetails() {
  const { id } = useParams() as { id: string };
  const [book, setBook] = useState<Book | null>(null);
  const [isLoading] = useState(false);
  const [isReviewModalOpen, setReviewModalOpen] = useState(false);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews] = useState(0);
  const [isAddedToWishlist, setIsAddedToWishlist] = useState(false);
  const [wishlistMessage, setWishlistMessage] = useState("");
  const [wishlist, setWishlist] = useState<Wishlist[]>([]);
  const [newWishlistName, setNewWishlistName] = useState("");
  const [showWishlistDropdown, setShowWishlistDropdown] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const { addToCart } = useCart();
  
  useEffect(() => {
    const fetchBookDetails = async (bookId: string) => {
      try {
        const response = await fetch(`https://www.googleapis.com/books/v1/volumes/${bookId}?key=${process.env.NEXT_PUBLIC_GOOGLE_BOOKS_API_KEY}`);
        if (!response.ok) throw new Error("Error fetching book details: " + response.statusText);

        const data = await response.json();
        const mappedBookData = mapBookData(data);

        console.log(mappedBookData); // Check the console to see if the data mapping is correct
        setBook(mappedBookData);
      } catch (error) {
        console.error("Failed to fetch book details:", error);
      }
    };

    const fetchReviews = async () => {
      try {
        const response = await fetch("/api/reviews");
        if (!response.ok) throw new Error("Error fetching reviews: " + response.statusText);

        const data = await response.json();
        setReviews(data);
        calculateAverageRating(data);
      } catch (error) {
        console.error("Failed to fetch reviews:", error);
      }
    };

    if (id) {
      fetchBookDetails(id);
      fetchReviews();
      loadWishlist();
    }
  }, [id, calculateAverageRating, mapBookData]);

  interface Book {
    id: string;
    title: string;
    description: string;
    cover_url: string;
    author_name: string[];
    published_year: number;
    price: number;
    discounted_price: number;
    pages?: number;
  }
  type Wishlist = {
    name: string;
    books: (Book | null)[];
  };

  interface Review {
    id: string;
    content: string; // Text of the review
    author: string;
    comment: string;
    rating: number;
  }
  interface BookData {
    id: string;
    volumeInfo: {
      title: string;
      description?: string;
      imageLinks?: {
        thumbnail?: string;
      };
      authors?: string[];
      publishedDate?: string;
    };
    saleInfo?: {
      listPrice?: {
        amount: number;
      };
      pageCount?: number; 
    };
  }

  
  const mapBookData = (data: BookData): Book => ({
    id: data.id,
    title: data.volumeInfo.title,
    description: data.volumeInfo.description || "No description available.",
    cover_url: data.volumeInfo.imageLinks?.thumbnail || "default-cover-url.jpg", 
    author_name: data.volumeInfo.authors || ["Unknown Author"],    
    published_year: parseInt(data.volumeInfo.publishedDate?.split("-")[0] || "0", 10),
    price: data.saleInfo?.listPrice?.amount || 0, 
    discounted_price: data.saleInfo?.listPrice?.amount || 0, 
    pages: (data.volumeInfo as { pageCount?: number }).pageCount ?? 0, 
  });
  

  const calculateAverageRating = (reviews: Review[]) => {
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const avgRating = reviews.length ? totalRating / reviews.length : 0;
    setAverageRating(avgRating);
  };
          
  
  const loadWishlist = () => {
    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlist(storedWishlist);
  };

  const addToWishlist = () => {
    const existingWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    if (!existingWishlist.includes(book?.id)) {
      existingWishlist.push(book);
      localStorage.setItem('wishlist', JSON.stringify(existingWishlist));
      setWishlist(existingWishlist);
      setIsAddedToWishlist(true);
      setWishlistMessage("Book added to wishlist!");

      setTimeout(() => {
        setWishlistMessage("");
      }, 3000);
    } else {
      setWishlistMessage("Book is already in your wishlist.");
    }
  };

  const toggleWishlistDropdown = () => {
    setShowWishlistDropdown(!showWishlistDropdown);
  };

  const handleCreateNewList = () => {
    if (newWishlistName) {
      const newList = { name: newWishlistName, books: [book] };
      const updatedWishlist = [...wishlist, newList];
      setWishlist(updatedWishlist);
      localStorage.setItem('wishlist', JSON.stringify(updatedWishlist));
      setNewWishlistName("");
    }
  };

  const toggleSynopsis = () => {
    setIsOpen(!isOpen);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!book) {
    return (
      <div className="text-center py-10">
        <h1 className="text-2xl font-bold text-gray-700">Book Not Found</h1>
        <p className="text-gray-500">The book you are looking for might not exist.</p>
      </div>
    );
  }

  const handleAddToCart = () => {
    if (book) {
      addToCart({
        id: book.id,
        title: book.title,
        price: book.discounted_price,
        cover_url: book.cover_url,
        quantity: 1,
      });
      setIsAddedToCart(true);
    }
  };

  return (
         
    <div className="container mx-auto p-6 md:p-10 bg-white rounded-lg shadow-lg relative">
    {/* Wishlist Dropdown */}
    <div className="relative mb-4">
      <button 
        onClick={toggleWishlistDropdown} 
        className="bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition duration-200"
      >
        Wishlist <FaChevronDown className="inline-block ml-2" />
      </button>
      {showWishlistDropdown && (
        <div className="absolute mt-2 bg-white shadow-lg rounded-lg p-4 w-64 z-10">
          <h3 className="text-lg font-semibold text-gray-700 mb-4">My Wishlist</h3>
          <ul className="mb-4">
            {wishlist.map((item, index) => (
              <li key={index} className="text-gray-600 mb-2">
                {item.name || item.name} 
              </li>
            ))}
          </ul>
          <input
            type="text"
            value={newWishlistName}
            onChange={(e) => setNewWishlistName(e.target.value)}
            placeholder="Create New List"
            className="w-full p-2 border border-gray-300 rounded-md mb-4"
          />
          <button
            onClick={handleCreateNewList}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-600 transition duration-200 w-full"
          >
            Add to Wishlist
          </button>
        </div>
      )}

    </div>
      {/* Book Details Section */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        {/* Book Image */}
        <div className="lg:col-span-1 flex justify-center mb-6 lg:mb-0">
      <div className="relative group w-[80%] lg:w-[90%] bg-gray-100 rounded-lg shadow-xl overflow-hidden transition-all duration-300 hover:shadow-2xl">
        <div className="relative w-full h-72"> {/* Set a fixed height for the image container */}
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill" // Fill the parent container
            objectFit="cover" // Maintain cover style
            className="transition-transform duration-300 transform group-hover:scale-105"
          />
        </div>
      </div>
    </div>

        {/* Book Details */}
        <div className="lg:col-span-2 space-y-6 text-center lg:text-left">
          <h1 className="text-4xl font-bold text-gray-800 hover:text-blue-500 transition duration-300">
            {book.title}
          </h1>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.author_name.join(", ")}</span>
            <span className="font-medium text-green-500">(Author)</span>
          </p>
                   {/* New Book Info: Pages and Published Date */}
            <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.pages} pages</span>
            <span className="font-medium text-green-500">(Pages)</span>
          </p>
          <p className="text-lg text-gray-600 flex justify-center lg:justify-start items-center">
            <span className="mr-2">{book.published_year}</span>
            <span className="font-medium text-green-500">(Published Date)</span>
          </p>
         
          {/* Book Description */}
          <div className="bg-gray-50 p-4 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold text-green-800 mb-2">Book Description:</h2>
            <p className="text-gray-600 italic">
              {book.description !== "No description available." ? (
                <>
                  {isOpen ? book.description : `${book.description.slice(0, 200)}...`}
                  <button
                    onClick={toggleSynopsis}
                    className="ml-2 text-green-700 underline hover:text-green-600"
                  >
                    {isOpen ? "Show Less" : "Show More"}
                  </button>
                </>
              ) : (
                <span>No description available for this book.</span>
              )}
            </p>
          </div>

 <div className="bg-white border border-gray-200 mt-6 pt-6 px-6 pb-6 rounded-3xl shadow-xl transition duration-300 transform hover:scale-105 hover:shadow-2xl hover:-translate-y-2">
  {/* Star Rating Section */}
  <p className="flex items-center justify-center lg:justify-start mb-6">
    <span className="text-yellow-400 mr-2">
      <StarRating rating={averageRating} />
    </span>
    <span className="font-semibold text-gray-900 text-xl lg:text-3xl">
      {averageRating.toFixed(1)} out of 5
    </span>
    <span className="ml-3 text-gray-500 text-sm lg:text-lg">
      ({totalReviews} reviews)
    </span>
  </p>

  {/* Write a Review Button */}
  <button
    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-700 text-white px-8 py-3 mt-6 rounded-full hover:from-indigo-600 hover:to-purple-800 transform hover:scale-110 transition-all duration-500 shadow-md focus:outline-none focus:ring-4 focus:ring-indigo-300"
    onClick={() => setReviewModalOpen(true)}
  >
    Write a Review
  </button>

  {/* Review Modal */}
  {isReviewModalOpen && <ReviewModal bookId={id} onClose={() => setReviewModalOpen(false)}   reviews={reviews as Review[]}/>}

  {reviews.map((review) => (
  <div key={review.id}>
    <p>{review.comment}</p>
    <p>Rating: {review.rating}</p>
  </div>
))}

  {/* Pricing Section */}
  <div className="flex flex-col mt-6 pt-4 border-t border-gray-300 lg:flex-row lg:items-center lg:justify-between">
    <p className="text-4xl font-extrabold text-gray-900 mb-4 lg:mb-0">
      ${book.discounted_price}
      <span className="line-through text-gray-400 ml-3 text-2xl">
        ${book.price}
      </span>
    </p>
  </div>

  {/* Add to Cart Button */}
  <button
    className={`bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-6 py-3 mt-4 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-emerald-300 ${
      isAddedToCart ? "bg-gray-400 cursor-not-allowed" : "hover:from-emerald-600 hover:to-teal-700"
    }`}
    onClick={handleAddToCart}
    disabled={isAddedToCart}
  >
    <span className="flex items-center justify-center">
      <FaShoppingCart className="mr-2" /> 
      {isAddedToCart ? "Added to Cart" : "Add to Cart"}
    </span>
  </button>

  {/* Add to Wishlist Button */}
  <button
    onClick={addToWishlist}
    className={`mt-6 px-6 py-3 rounded-full transition-all transform hover:scale-110 shadow-md focus:outline-none focus:ring-4 focus:ring-rose-300 ${
      isAddedToWishlist
        ? "bg-gray-400 cursor-not-allowed text-white"
        : "bg-gradient-to-r from-rose-500 to-pink-600 text-white hover:from-rose-600 hover:to-pink-700"
    }`}
    disabled={isAddedToWishlist}
  >
    <span className="flex items-center justify-center">
      <FaHeart className="inline-block mr-2" />
      {isAddedToWishlist ? "Added to Wishlist" : "Add to Wishlist"}
    </span>
  </button>
 </div>
          {wishlistMessage && (
            <p className="text-green-800 mt-2">{wishlistMessage}</p>
          )}
        </div>
      </div>
      <div className="mt-14 p-6 bg-gradient-to-r from-gray-100 via-gray-50 to-gray-100 rounded-lg shadow-md border-l-4 border-green-600">
      <div className="flex items-center justify-between border border-green-600 p-4 rounded-lg cursor-pointer" onClick={toggleSynopsis}>
        <h3 className="text-xl font-semibold text-green-800">Synopsis</h3>
        {isOpen ? <FaMinus className="text-green-600" /> : <FaPlus className="text-green-600" />}
      </div>

      {isOpen && (
        <div className="mt-4">
          <h3 className="text-xl font-semibold text-green-800 mb-2">Abreads Says:</h3>
          <p className="text-gray-700 leading-relaxed mb-3">
            At Abreads, we believe that books hold the power to transport us to different worlds and spark imagination like nothing else.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            Whether you are seeking knowledge, adventure, or simply looking for a good story to escape into, this book will not disappoint. Its compelling narrative, 
            well-crafted characters, and thought-provoking themes make it a must-read.
          </p>
          <p className="text-gray-700 leading-relaxed mb-3">
            From cover to cover, you will be captivated by the authors ability to blend entertainment with enlightenment. This is a journey every reader deserves to take.
          </p>
          <p className="text-green-700 font-medium italic">
            Grab your copy now, and let this book become part of your personal collection of literary treasures!
          </p>
        </div>
      )}
    </div>
                                   
      {/* Footer */}
      <div className="mt-10">
        <Bestsellers />
        <Footer />
      </div>
    </div>
  );
}







import mongoose from 'mongoose';

const MONGO_URI = process.env.MONGO_URL;

if (!MONGO_URI) {
  throw new Error("Please define the MONGO_URL environment variable inside .env.local");
}

// Extend global object with mongoose cache
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn;
  }

  // Logging for debug purposes
  console.log("Attempting to connect to MongoDB with URI:", MONGO_URI);

  if (!cached.promise) {
    cached.promise = mongoose.connect(MONGO_URI).then((mongoose) => {
      console.log("MongoDB connected successfully");
      return mongoose;
    }).catch((error) => {
      console.error("MongoDB connection error:", error);
      throw new Error("MongoDB connection failed");
    });
  }             

  cached.conn = await cached.promise;
  return cached.conn;
}

export default dbConnect;
  






// eslint-disable-next-line @typescript-eslint/no-unused-vars
import mongoose from 'mongoose';

declare global {
  let mongoose: { conn: typeof mongoose | null; promise: Promise<typeof mongoose> | null };
}

export {}; // Ensures this file is treated as a module by TypeScript






{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "warn", 
      {
        "argsIgnorePattern": "^_" // Ignore unused function arguments starting with _
      }
    ]
  }
}

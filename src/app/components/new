
'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { AiOutlineSearch, AiOutlineShoppingCart, AiOutlineUser, AiOutlineHeart, AiOutlineDown, AiOutlineClose, AiOutlineHistory, AiOutlineLogout} from 'react-icons/ai';
import AuthModal from './AuthModal'; // Ensure this path is correct
import { useRouter } from 'next/navigation';
import { useCart } from '../context/CartContext';
import CartPage from '../cart/page';

interface NavbarProps {
  onSearch: (searchTerm: string) => void;
  onCategorySelect: (category: string) => void;
}

const Navbar: React.FC<NavbarProps> = ({ onSearch, onCategorySelect }) => {
  const router = useRouter();
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [userName, setUserName] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [wishlistCount, setWishlistCount] = useState(0);
  const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);
  const [isDashboardOpen, setIsDashboardOpen] = useState(false);
  const { totalItems } = useCart();
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [hasNewOrder, setHasNewOrder] = useState(false);

  const categories = [
    'Fiction',
    'Novel',
    "kids",
    'Romance',
    'Mystery',
    'Biography',
    'Art',
    'Games',
    "Children's",
    'Stationery & Gifts',
    'Science Fiction',
    "Our Favirotes",
  ];

  useEffect(() => {
    setIsClient(true);
    const token = localStorage.getItem('jwtToken');
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      setUserName(decodedToken.name);
    }

    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlistCount(storedWishlist.length);
  }, [router]);

  const closeAuthModal = () => setAuthModalOpen(false);
   
  useEffect(() => {
    const checkNewOrder = async () => {
      const response = await fetch('/api/get-order-details');
      const data = await response.json();
      setHasNewOrder(data.newOrder);
    };
    checkNewOrder();
  }, []);

  const handleSignOut = async () => {
    localStorage.removeItem('jwtToken');
    setUserName(null);
    router.push('/');
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      onSearch(searchTerm);
      navigateToExploreBooks();
      resetSearch();
    }
  };

  const resetSearch = () => setSearchTerm('');

  const navigateToExploreBooks = () => {
    const exploreSection = document.getElementById('explore-books');
    if (exploreSection) {
      const sectionPosition = exploreSection.getBoundingClientRect().top + window.scrollY;
      window.scrollTo({ top: sectionPosition - 140, behavior: 'smooth' });
    }
  };

  const handleViewWishlist = () => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      router.push('/wishlist');
    } else {
      alert('You need to be authenticated to view your wishlist.');
      setAuthModalOpen(true);
    }
  };

  const toggleAuthModal = () => setAuthModalOpen((prev) => !prev);

  const handleCategorySelect = (category: string) => {
    onCategorySelect(category);
    navigateToExploreBooks();
    setIsCategoriesOpen(false);
  };

  const toggleCart = () => setIsCartOpen((prev) => !prev); 

  const toggleDashboard = () => setIsDashboardOpen((prev) => !prev);

  if (!isClient) return null;

  return (
    <>
             
      {/* Upper Navbar - visible on larger screens */}
      <nav className="bg-gray-50 border-b border-green-300 fixed w-full top-0 z-50 shadow-md">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            
    <Link href="/" className="text-green-900 text-4xl font-bold tracking-wide ml-6 hover:text-green-500 font-cinzel">
    ABreads
    </Link>
            {/* Search Bar - visible on larger screens */}
            <form
  onSubmit={handleSearch}
  className="hidden lg:flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-3 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>

       {/* Right Icons */}
       <div className="flex items-center space-x-4">
  <button onClick={toggleCart} className="relative text-gray-900 hover:text-green-600">
    <AiOutlineShoppingCart className="text-2xl" />
    {totalItems > 0 && (
      <span className="absolute -top-2 -right-2 inline-block w-5 h-5 text-center bg-green-500 text-white rounded-full text-xs">
        {totalItems}
      </span>
    )}
  </button>

              <div className="flex items-center space-x-4 flex-row-reverse">
            {userName && (
        <button
      onClick={toggleDashboard}
      className="text-gray-900 hover:text-green-500 transition"
       >
      <p className='h-6 font-medium w-6 ml-2 mr-8 text-green-600 border-b border-green-700'>Account</p>
     </button>
      )}
      </div>
              {userName ? (
                <button onClick={handleSignOut} className="text-gray-900 hover:text-green-500 transition flex items-center">
                  <AiOutlineUser className="h-6 w-6" />
                  <span className="ml-1">Logout</span>
                </button>
              ) : (
                <button onClick={toggleAuthModal} className="text-gray-900 hover:text-green-500 transition">
                  <AiOutlineUser className="h-6 w-6" />
                </button>
              )}
              {/* Wishlist */}
              <button
       onClick={handleViewWishlist}
       className="relative py-1 px-4 group transition-colors duration-300 rounded-r-xl"
    >
       <span className="group-hover:text-green-600 text-gray-700 flex items-center relative">
       <AiOutlineHeart className="mr-1 text-2xl" /> {/* Increased icon size */}
       {wishlistCount > 0 && (
       <span className="absolute -top-2 -right-2 bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
        {wishlistCount}
        </span>
       )}
          </span>
           </button>
            </div>
          </div>
        </div>
      </nav>


{/* Lower Navbar - always visible */}
<nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-2 lg:space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-1 px-3 sm:py-2 sm:px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center text-sm sm:text-base"
        >
          ðŸ“š <span className="ml-1 sm:ml-2">Categories</span>
          <AiOutlineDown
            className={`ml-1 sm:ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}`}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-48 sm:w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-3 sm:px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b text-sm sm:text-base"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Categories visible on large screens */}
      <div className="hidden lg:flex space-x-4">
        {categories.map((category, index) => (
          <button
            key={category}
            onClick={() => handleCategorySelect(category)}
            className={`py-1 sm:py-2 px-3 sm:px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
              ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''} text-sm sm:text-base`}
          >
            {category}
          </button>
        ))}
      </div>
    </div>

    {/* Search Bar - visible on smaller screens */}
    <form
      onSubmit={handleSearch}
      className="lg:hidden flex relative w-full max-w-xs sm:max-w-sm md:max-w-md"
    >
      <div className="relative flex items-center w-full">
        {/* Search Icon on the Left */}
        <AiOutlineSearch className="absolute left-3 w-4 sm:w-5 h-4 sm:h-5 text-gray-400" />

        {/* Search Input Field */}
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Search for books..."
          className="w-full pl-10 pr-12 py-1 sm:py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-md shadow-lg focus:outline-none focus:ring-2 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out text-sm sm:text-base"
        />

        {/* Submit Button with Icon */}
        <button
          type="submit"
          className="absolute right-0 h-full bg-green-600 text-white px-3 sm:px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-r-md"
        >
          <AiOutlineSearch className="w-4 sm:w-5 h-4 sm:h-5" />
        </button>
      </div>
    </form>
  </div>
</nav>

<aside
  className={`fixed inset-y-0 left-0 w-64 bg-gradient-to-b from-green-50 via-green-100 to-green-200 shadow-2xl z-50 transition-transform duration-300 ease-in-out
    ${isDashboardOpen ? 'transform translate-x-0' : 'transform -translate-x-full'}
    `}
>
  <div className="flex flex-col p-8 space-y-4 relative">
    {/* Close Icon - Only for small screens */}
    <button
      onClick={toggleDashboard}
      className="absolute top-4 right-4 text-gray-700 hover:text-red-500 transition-transform duration-300 ease-in-out transform hover:scale-105"
      aria-label="Close Dashboard"
    >
      <AiOutlineClose className="w-7 h-7" />
    </button>

    {/* Wishlist */}
    <button 
      onClick={() => router.push('/wishlist')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineHeart className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">My Wishlist</span>
    </button>

    {/* Account Settings */}
    <button 
      onClick={() => router.push('/account')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineUser className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Settings</span>
    </button>

    {/* Order History */}
    <Link href="/order-history" legacyBehavior>
      <a className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg">
        <div className="p-2 bg-green-50 rounded-full shadow-inner">
          <AiOutlineHistory className="text-2xl text-green-600" />
        </div>
        <span className="text-lg font-semibold text-gray-800">Order History</span>
        {hasNewOrder && (
          <span className="absolute -top-2 -right-2 w-3 h-3 bg-red-500 rounded-full animate-ping"></span>
        )}
      </a>
    </Link>

    {/* Logout */}
    <button 
      onClick={handleSignOut}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineLogout className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Logout</span>
    </button>
  </div>
</aside>
     {/* Cart Sidebar */}
     <aside
        className={`fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-50 transform transition-transform duration-300 ease-in-out ${
          isCartOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="p-6">
          <button onClick={toggleCart} className="absolute top-4 right-4 text-gray-700 hover:text-red-500">
            <AiOutlineClose className="w-6 h-6" />
          </button>
          <CartPage />
        </div>
      </aside>

      {isCartOpen && (
      <div
      onClick={toggleCart}
      className='inset-0 bg-black bg-opacity-50 z-40'
      />
      )
      }
        {/* Auth Modal */}
        {isAuthModalOpen && (
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={closeAuthModal}
          onLoginSuccess={(token, name) => {
          setUserName(name);
           localStorage.setItem('jwtToken', token); closeAuthModal();
         }}
         /> 
        )} 
       </>
     );
   };

export default Navbar;








////lower navbr code  

 <nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-2 px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center"
        >
          ðŸ“š <span className="ml-2">Categories</span>
          <AiOutlineDown
            className={`ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}`}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

{/* Categories visible on large screens */}
<div className="hidden lg:flex space-x-6">
  {categories.map((category, index) => (
    <button
      key={category}
      onClick={() => handleCategorySelect(category)}
      className={`py-2 px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
        ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''}`}
    >
      {category}
    </button>
  ))}
</div>
 </div>

{/* Search Bar - visible on smaller screens */}
<form
  onSubmit={handleSearch}
  className="lg:hidden flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>
  </div>
</nav>










///uppernavbar code 


<nav className="bg-gray-50 border-b border-green-300 fixed w-full top-0 z-50 shadow-md">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12">
      <div className="flex justify-between items-center h-16">
        {/* Logo */}
        
<Link href="/" className="text-green-900 text-4xl font-bold tracking-wide ml-6 hover:text-green-500 font-cinzel">
ABreads
</Link>
        {/* Search Bar - visible on larger screens */}
        <form
onSubmit={handleSearch}
className="hidden lg:flex relative w-full max-w-lg"
>
<div className="relative flex items-center w-full">
{/* Search Icon on the Left */}
<AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

{/* Search Input Field */}
<input
  type="text"
  value={searchTerm}
  onChange={(e) => setSearchTerm(e.target.value)}
  placeholder="Search for books..."
  className="w-full pl-12 pr-16 py-3 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
/>

{/* Submit Button with Icon */}
<button
  type="submit"
  className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
>
  <AiOutlineSearch className="w-5 h-5" />
</button>
</div>
</form>

   {/* Right Icons */}
   <div className="flex items-center space-x-4">
<button onClick={toggleCart} className="relative text-gray-900 hover:text-green-600">
<AiOutlineShoppingCart className="text-2xl" />
{totalItems > 0 && (
  <span className="absolute -top-2 -right-2 inline-block w-5 h-5 text-center bg-green-500 text-white rounded-full text-xs">
    {totalItems}
  </span>
)}
</button>

          <div className="flex items-center space-x-4 flex-row-reverse">
        {userName && (
    <button
  onClick={toggleDashboard}
  className="text-gray-900 hover:text-green-500 transition"
   >
  <p className='h-6 font-medium w-6 ml-2 mr-8 text-green-600 border-b border-green-700'>Account</p>
 </button>
  )}
  </div>
          {userName ? (
            <button onClick={handleSignOut} className="text-gray-900 hover:text-green-500 transition flex items-center">
              <AiOutlineUser className="h-6 w-6" />
              <span className="ml-1">Logout</span>
            </button>
          ) : (
            <button onClick={toggleAuthModal} className="text-gray-900 hover:text-green-500 transition">
              <AiOutlineUser className="h-6 w-6" />
            </button>
          )}
          {/* Wishlist */}
          <button
   onClick={handleViewWishlist}
   className="relative py-1 px-4 group transition-colors duration-300 rounded-r-xl"
>
   <span className="group-hover:text-green-600 text-gray-700 flex items-center relative">
   <AiOutlineHeart className="mr-1 text-2xl" /> {/* Increased icon size */}
   {wishlistCount > 0 && (
   <span className="absolute -top-2 -right-2 bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
    {wishlistCount}
    </span>
   )}
      </span>
       </button>
        </div>
      </div>
    </div>
  </nav>






'use client';
import './globals.css';
import Navbar from './components/Navbar';
import SessionProvider from './components/SessionProvider';
import FeaturedBooks from './components/FeaturedBooks';
import ExploreBooks from './components/ExploreBooks';
import React, { useState } from 'react';
import { CartProvider } from './context/CartContext';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { persistor, store } from '../app/redux/store';
import { usePathname } from 'next/navigation'; 
import Footer from './components/Footer';
import Bestsellers from './components/Bestsellers';
import HeroSection from './components/Hero';
import ComingSoon from './components/ComingSoon';


export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>('');
  const pathname = usePathname();

  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    setSearchTerm(''); // Clear search term when a category is selected
  };

  const handleSearch = (term: string) => {
    setSearchTerm(term);
    setSelectedCategory(null); // Clear category when searching
  };

  const isDetailsPage = pathname?.startsWith('/details');

  return (
    <html lang="en">
      <body>
        <SessionProvider>
          <CartProvider>
              {!isDetailsPage && (
                            <Provider store={store}>
                            <PersistGate loading={null} persistor={persistor}>
                              <div className="pb-14">
                      <Navbar 
                        onSearch={handleSearch} 
                        onCategorySelect={handleCategorySelect} 
                      />
                      <main className="flex-grow">{children}</main>
                    </div>
                    <div className='pt-8 mt-8'>
                      <HeroSection />
                    </div>
                    <div>
                      <Bestsellers />
                    </div>
                    <div>
                      <FeaturedBooks />
                    </div>
                    <div className='pt-4 mt-4'>
                      <ComingSoon />
                    </div>
                    <div>
                      <ExploreBooks category={selectedCategory} searchTerm={searchTerm} />
                    </div>
                    <div className='pt-6 mt-6'>
                      <Footer />
                    </div>
                    </PersistGate>
                    </Provider>
              )}
              {children}
              </CartProvider>
        </SessionProvider>
      </body>
    </html>
  );
}















updated code 

<nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-2 px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center"
        >
          ðŸ“š <span className="ml-2">Categories</span>
          <AiOutlineDown
            className={ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

{/* Categories visible on large screens */}
<div className="hidden lg:flex space-x-6">
  {categories.map((category, index) => (
    <button
      key={category}
      onClick={() => handleCategorySelect(category)}
      className={py-2 px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
        ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''}}
    >
      {category}
    </button>
  ))}
</div>
 </div>

{/* Search Bar - visible on smaller screens */}
<form
  onSubmit={handleSearch}
  className="lg:hidden flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>
  </div>
</nav>









'use client';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import { AiOutlineSearch, AiOutlineShoppingCart, AiOutlineUser, AiOutlineHeart, AiOutlineDown, AiOutlineClose, AiOutlineHistory, AiOutlineLogout} from 'react-icons/ai';
import AuthModal from './AuthModal'; // Ensure this path is correct
import { useRouter } from 'next/navigation';
import { useCart } from '../context/CartContext';
import CartPage from '../cart/page';

interface NavbarProps {
  onSearch: (searchTerm: string) => void;
  onCategorySelect: (category: string) => void;
}

const Navbar: React.FC<NavbarProps> = ({ onSearch, onCategorySelect }) => {
  const router = useRouter();
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [userName, setUserName] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);
  const [wishlistCount, setWishlistCount] = useState(0);
  const [isCategoriesOpen, setIsCategoriesOpen] = useState(false);
  const [isDashboardOpen, setIsDashboardOpen] = useState(false);
  const { totalItems } = useCart();
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [hasNewOrder, setHasNewOrder] = useState(false);

  const categories = [
    'Fiction',
    'Novel',
    "kids",
    'Romance',
    'Mystery',
    'Biography',
    'Art',
    'Games',
    "Children's",
    'Stationery & Gifts',
    'Science Fiction',
    "Our Favirotes",
  ];

  useEffect(() => {
    setIsClient(true);
    const token = localStorage.getItem('jwtToken');
    if (token) {
      const decodedToken = JSON.parse(atob(token.split('.')[1]));
      setUserName(decodedToken.name);
    }

    const storedWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    setWishlistCount(storedWishlist.length);
  }, [router]);

  const closeAuthModal = () => setAuthModalOpen(false);
   
  useEffect(() => {
    const checkNewOrder = async () => {
      const response = await fetch('/api/get-order-details');
      const data = await response.json();
      setHasNewOrder(data.newOrder);
    };
    checkNewOrder();
  }, []);

  const handleSignOut = async () => {
    localStorage.removeItem('jwtToken');
    setUserName(null);
    router.push('/');
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      onSearch(searchTerm);
      navigateToExploreBooks();
      resetSearch();
    }
  };

  const resetSearch = () => setSearchTerm('');

  const navigateToExploreBooks = () => {
    const exploreSection = document.getElementById('explore-books');
    if (exploreSection) {
      const sectionPosition = exploreSection.getBoundingClientRect().top + window.scrollY;
      window.scrollTo({ top: sectionPosition - 140, behavior: 'smooth' });
    }
  };

  const handleViewWishlist = () => {
    const token = localStorage.getItem('jwtToken');
    if (token) {
      router.push('/wishlist');
    } else {
      alert('You need to be authenticated to view your wishlist.');
      setAuthModalOpen(true);
    }
  };

  const toggleAuthModal = () => setAuthModalOpen((prev) => !prev);

  const handleCategorySelect = (category: string) => {
    onCategorySelect(category);
    navigateToExploreBooks();
    setIsCategoriesOpen(false);
  };

  const toggleCart = () => setIsCartOpen((prev) => !prev); 

  const toggleDashboard = () => setIsDashboardOpen((prev) => !prev);

  if (!isClient) return null;

  return (
    <>
             
      {/* Upper Navbar - visible on larger screens */}
      <nav className="bg-gray-50 overflow-x-hidden border-b mx-width-auto border-green-300 fixed w-full top-0 z-50 shadow-md">
        <div className="mx-width-auto px-4 sm:px-6 lg:px-8 xl:px-12">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            
    <Link href="/" className="text-green-900 text-3xl font-bold tracking-wide ml-2 hover:text-green-500 font-cinzel lg:text-4xl">
    ABreads
    </Link>
            {/* Search Bar - visible on larger screens */}
            <form
  onSubmit={handleSearch}
  className="hidden lg:flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-3 w-5 h-5 text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-3 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>

       {/* Right Icons */}
       <div className="flex items-center space-x-4">
  <button onClick={toggleCart} className="relative text-gray-900 hover:text-green-600">
    <AiOutlineShoppingCart className="text-2xl" />
    {totalItems > 0 && (
      <span className="absolute -top-2 -right-2 inline-block w-5 h-5 text-center bg-green-500 text-white rounded-full text-xs">
        {totalItems}
      </span>
    )}
  </button>

              <div className="flex items-center space-x-4 flex-row-reverse">
            {userName && (
        <button
      onClick={toggleDashboard}
      className="text-gray-900 hover:text-green-500 transition"
       >
      <p className='h-6 font-medium w-6 ml-2 mr-8 text-green-600 border-b border-green-700'>Account</p>
     </button>
      )}
      </div>
              {userName ? (
                <button onClick={handleSignOut} className="text-gray-900 hover:text-green-500 transition flex items-center">
                  <AiOutlineUser className="h-6 w-6" />
                  <span className="ml-1">Logout</span>
                </button>
              ) : (
                <button onClick={toggleAuthModal} className="text-gray-900 hover:text-green-500 transition">
                  <AiOutlineUser className="h-6 w-6" />
                </button>
              )}
              {/* Wishlist */}
              <button
       onClick={handleViewWishlist}
       className="relative py-1 px-4 group transition-colors duration-300 rounded-r-xl"
    >
       <span className="group-hover:text-green-600 text-gray-700 flex items-center relative">
       <AiOutlineHeart className="mr-1 text-2xl" /> {/* Increased icon size */}
       {wishlistCount > 0 && (
       <span className="absolute -top-2 -right-2 bg-green-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
        {wishlistCount}
        </span>
       )}
          </span>
           </button>
            </div>
          </div>
        </div>
      </nav>

//lower navbar

      <nav className="fixed w-full top-16 z-50 bg-white border-t border-gray-300 shadow-lg">
  <div className="mx-width-auto px-4 sm:px-6 lg:px-8 xl:px-12 py-2 flex justify-between items-center">
    {/* Categories */}
    <div className="flex items-center space-x-4">
      <div className="relative lg:hidden">
        <button
          onClick={() => setIsCategoriesOpen((prev) => !prev)}
          className="py-2 px-5 rounded-lg bg-gray-100 text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:bg-green-500 hover:text-white hover:scale-105 flex items-center"
        >
          ðŸ“š <span>All</span>
          <AiOutlineDown
            className={`ml-2 transform transition-transform duration-200 ${isCategoriesOpen ? 'rotate-180' : 'rotate-0'}`}
          />
        </button>
        {/* Categories dropdown */}
        {isCategoriesOpen && (
          <div className="absolute left-0 mt-2 py-2 w-56 bg-green-50 border border-green-200 shadow-xl rounded-md z-50 transition-opacity duration-300 ease-in-out">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => handleCategorySelect(category)}
                className="block px-4 py-2 text-left text-gray-700 hover:bg-green-300 w-full transition-colors border-b"
              >
                {category}
              </button>
            ))}
          </div>
        )}
      </div>

{/* Categories visible on large screens */}
<div className="hidden lg:flex space-x-6">
  {categories.map((category, index) => (
    <button
      key={category}
      onClick={() => handleCategorySelect(category)}
      className={`py-2 px-4 rounded-lg bg-transparent text-gray-900 font-semibold shadow-md transition-transform duration-200 ease-in-out hover:scale-105 
        ${index !== categories.length - 1 ? 'border-r border-gray-300 hover:border-gray-500' : ''}`}
    >
      {category}
    </button>
  ))}
</div>
 </div>

{/* Search Bar - visible on smaller screens */}
<form
  onSubmit={handleSearch}
  className="lg:hidden flex relative w-full max-w-lg"
>
  <div className="relative flex items-center w-full">
    {/* Search Icon on the Left */}
    <AiOutlineSearch className="absolute left-2 mx-width-auto text-gray-400" />

    {/* Search Input Field */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search for books..."
      className="w-full pl-12 pr-16 py-2 text-gray-800 bg-gray-50 border border-gray-300 rounded-none shadow-lg focus:outline-none focus:ring-4 focus:ring-green-300 focus:bg-white transition-all duration-300 ease-in-out hover:shadow-xl"
    />

    {/* Submit Button with Icon */}
    <button
      type="submit"
      className="absolute right-0 h-full bg-green-600 text-white px-4 flex items-center justify-center shadow hover:bg-green-500 transition-transform duration-200 transform hover:scale-105 rounded-none"
    >
      <AiOutlineSearch className="w-5 h-5" />
    </button>
  </div>
</form>
  </div>
</nav>

<aside
  className={`fixed inset-y-0 left-0 w-64 bg-gradient-to-b from-green-50 via-green-100 to-green-200 shadow-2xl z-50 transition-transform duration-300 ease-in-out
    ${isDashboardOpen ? 'transform translate-x-0' : 'transform -translate-x-full'}
    `}
>
  <div className="flex flex-col p-8 space-y-4 relative">
    {/* Close Icon - Only for small screens */}
    <button
      onClick={toggleDashboard}
      className="absolute top-4 right-4 text-gray-700 hover:text-red-500 transition-transform duration-300 ease-in-out transform hover:scale-105"
      aria-label="Close Dashboard"
    >
      <AiOutlineClose className="w-7 h-7" />
    </button>

    {/* Wishlist */}
    <button 
      onClick={() => router.push('/wishlist')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineHeart className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">My Wishlist</span>
    </button>

    {/* Account Settings */}
    <button 
      onClick={() => router.push('/account')}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineUser className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Settings</span>
    </button>

    {/* Order History */}
    <Link href="/order-history" legacyBehavior>
      <a className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg">
        <div className="p-2 bg-green-50 rounded-full shadow-inner">
          <AiOutlineHistory className="text-2xl text-green-600" />
        </div>
        <span className="text-lg font-semibold text-gray-800">Order History</span>
        {hasNewOrder && (
          <span className="absolute -top-2 -right-2 w-3 h-3 bg-red-500 rounded-full animate-ping"></span>
        )}
      </a>
    </Link>

    {/* Logout */}
    <button 
      onClick={handleSignOut}
      className="flex items-center justify-start space-x-4 p-4 border-b border-gray-300 text-gray-800 hover:bg-gradient-to-r hover:from-green-100 hover:to-green-300 transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md rounded-lg"
    >
      <div className="p-2 bg-green-50 rounded-full shadow-inner">
        <AiOutlineLogout className="text-2xl text-green-600" />
      </div>
      <span className="text-lg font-semibold text-gray-800">Logout</span>
    </button>
  </div>
</aside>
     {/* Cart Sidebar */}
     <aside
        className={`fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-50 transform transition-transform duration-300 ease-in-out ${
          isCartOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="p-6">
          <button onClick={toggleCart} className="absolute top-4 right-4 text-gray-700 hover:text-red-500">
            <AiOutlineClose className="w-6 h-6" />
          </button>
          <CartPage />
        </div>
      </aside>

      {isCartOpen && (
      <div
      onClick={toggleCart}
      className='inset-0 bg-black bg-opacity-50 z-40'
      />
      )
      }
        {/* Auth Modal */}
        {isAuthModalOpen && (
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={closeAuthModal}
          onLoginSuccess={(token, name) => {
          setUserName(name);
           localStorage.setItem('jwtToken', token); closeAuthModal();
         }}
         /> 
        )} 
       </>
     );
   };

export default Navbar;






import Image from 'next/image';
import Link from 'next/link';

interface Book {
  id: string;
  title: string;
  author: string; // Added the author field for display
  cover_url: string;
}

interface BookCardProps {
  book: Book;
}

const BookCard: React.FC<BookCardProps> = ({ book }) => {
  return (
    <div className="relative max-w-full sm:max-w-xs bg-white bg-opacity-80 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-2 overflow-hidden border border-gray-200 hover:border-gray-400">
      <Link href={`/details/${book.id}`} className="block group">
        {/* Book Cover Section */}
        <div className="h-64 relative overflow-hidden rounded-t-xl">
          <Image
            src={book.cover_url}
            alt={book.title}
            layout="fill"
            objectFit="cover"
            className="transition-transform duration-700 ease-out group-hover:scale-105 group-hover:brightness-90"
          />
        </div>

        {/* Book Title and Author Section */}
        <div className="p-4 text-center">
          <h3 className="text-lg sm:text-xl font-semibold text-gray-800 truncate transition-colors duration-300 group-hover:text-indigo-500">
            {book.title}
          </h3>
          <p className="text-sm sm:text-md text-gray-600 group-hover:text-gray-700 transition-colors duration-300">
            {book.author}
          </p>
        </div>
      </Link>

      {/* "View Details" Button (Appears on Hover) */}
      <div className="absolute inset-0 bg-gradient-to-t from-gray-800 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out flex flex-col justify-end p-4">
        <div className="flex justify-center space-x-4">
          <Link href={`/details/${book.id}`}>
            <button className="bg-gray-100 hover:bg-gray-200 text-gray-800 hover:text-gray-900 text-sm font-semibold py-2 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105">
              View Details
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default BookCard;









import { useEffect, useState, useMemo } from 'react';
import BookCard from './BookCard';
import Pagination from './Pagination';
import Skeleton from './Skeleton';

interface Book {
  id: string;
  volumeInfo: {
    title: string;
    imageLinks?: {
      thumbnail: string;
    };
    authors?: string[]; // Add authors as an optional property
  };
}

interface ExploreBooksProps {
  category: string | null;
  searchTerm: string;
}

const ExploreBooks: React.FC<ExploreBooksProps> = ({ category, searchTerm }) => {
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);

  useEffect(() => {
    const fetchBooks = async () => {
      setLoading(true);
      try {
        const query = category
          ? `category=${category}`
          : searchTerm
          ? `title=${searchTerm}`
          : 'bestsellers';

        const response = await fetch(`/api/books?${query}&page=${currentPage}&limit=12`);
        const data = await response.json();

        setBooks(data.items ?? []);
        setTotalPages(Math.ceil(data.totalItems / 12));
        setLoading(false);
      } catch (error) {
        console.error('Error fetching books:', error);
        setError('Failed to load books');
        setLoading(false);
      }
    };

    fetchBooks();
  }, [category, searchTerm, currentPage]);

  useEffect(() => {
    const exploreBooksSection = document.getElementById('explore-books');
    if (exploreBooksSection) {
      exploreBooksSection.scrollIntoView({ behavior: 'smooth' });
    }
  }, [currentPage]);

  const cachedBooks = useMemo(() => books, [books]);

  if (loading) {
    return (
      <section className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
        <Skeleton count={12} />
      </section>
    );
  }

  if (error) {
    return <div className="text-center mt-20 text-red-500">{error}</div>;
  }

  return (
    <section id="explore-books" className="my-12 px-4 lg:px-12 py-6 bg-white text-gray-800">
      <h2 className="text-5xl font-extrabold tracking-tighter text-left mb-6 font-serif text-gray-900 leading-tight">
        {category ? `${category} Books 2025` : searchTerm ? `Results for "${searchTerm}"` : 'Explore Popular Books'}
      </h2>

      <p className="text-lg lg:text-xl text-gray-600 mb-6 text-left leading-relaxed">
        {category || searchTerm ? 'Discover top-rated books.' : 'Check out the most popular books right now.'}
      </p>

      <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8">
        {cachedBooks.length > 0 ? (
          cachedBooks.map((book) => (
            <div key={book.id} className="min-w-[220px] max-w-[220px] group relative transform transition-transform duration-300 hover:scale-105 rounded-lg overflow-hidden">
              <BookCard
                book={{
                  id: book.id,
                  title: book.volumeInfo.title,
                  cover_url: book.volumeInfo.imageLinks?.thumbnail || '/default-book-cover.jpg',
                  author: book.volumeInfo.authors?.join(', ') || 'Unknown Author', // Include the author
                }}
              />
            </div>
          ))
        ) : (
          <p className="text-center text-gray-500 col-span-full">No books found.</p>
        )}
      </div>

      <div className="flex justify-center mt-12">
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
      </div>
    </section>
  );
};

export default ExploreBooks;



 





 'use client';
import { Suspense, useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

interface LineItem {
  id: string;
  description: string;
  quantity: number;
  amount_total: number;
}

interface OrderDetails {
  id: string;
  amount_total: number;
  line_items: {
    data: LineItem[];
  };
}

const SuccessPageContent = () => {
  const searchParams = useSearchParams();
  const session_id = searchParams?.get('session_id');
  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const router = useRouter();

  useEffect(() => {
    document.body.style.overflow = 'hidden';
    return () => { 
      document.body.style.overflow = 'auto';
    };
  }, []);

  useEffect(() => {
    if (session_id) {
      const fetchAndSaveOrder = async () => {
        try {
          const response = await fetch(`/api/get-order-details?session_id=${session_id}`);
          if (!response.ok) throw new Error('Failed to fetch order details');
          
          const data: OrderDetails = await response.json();
          setOrderDetails(data);
          setOrderConfirmed(true);

          await fetch('/api/save-order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...data, userId: 'sampleUserId' }),
          });
        } catch {
          setLoading(false);
        } finally {
          setLoading(false);
        }
      };
      fetchAndSaveOrder();
    } else {
      setLoading(false);
    }
  }, [session_id]);

  if (loading) return <p className="text-lg text-gray-700">Loading order details...</p>;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-75 z-50">
      <div className="min-h-screen flex flex-col items-center justify-center mt-16 pt-16 p-4">
        <div className="bg-white shadow-lg p-8 rounded-lg max-w-3xl w-full sm:w-11/12 md:w-3/4 lg:w-full transition transform hover:scale-105">
          <h1 className="text-4xl font-bold mb-6 text-center text-green-600">Order Success!</h1>
          {orderConfirmed && (
            <p className="text-lg text-green-500 mb-4">Your order has been confirmed!</p>
          )}
          {orderDetails ? (
            <div>
              <h2 className="text-2xl font-semibold mb-4">Thank you for your order!</h2>
              <div className="border-t border-gray-200 my-4" />
              <p className="text-lg mb-2"><strong>Order ID:</strong> {orderDetails.id}</p>
              <p className="text-lg mb-4"><strong>Amount Paid:</strong> ${(orderDetails.amount_total / 100).toFixed(2)}</p>
              <h3 className="text-xl font-semibold mb-2">Order Details:</h3>
              <ul className="space-y-4">
                {orderDetails.line_items?.data?.map((item: LineItem) => (
                  <li key={item.id} className="flex justify-between items-center bg-gray-50 p-4 rounded-md shadow-sm transition hover:bg-gray-100">
                    <div>
                      <p className="font-medium">{item.description}</p>
                      <p className="text-sm text-gray-500"><strong>Quantity:</strong> {item.quantity}</p>
                    </div>
                    <p className="text-lg font-semibold">${(item.amount_total / 100).toFixed(2)}</p>
                  </li>
                ))}
              </ul>
              <div className="mt-6 flex space-x-4">
                <button 
                  onClick={() => router.replace('/')} 
                  className="inline-block px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
                >
                  Return to Home
                </button>
              </div>   
            </div>
          ) : (
            <p>Order details not available.</p>
          )}
        </div>
      </div>
    </div>
  );
};

const SuccessPage = () => (
  <Suspense fallback={<p className="text-lg text-gray-700">Loading order details...</p>}>
    <SuccessPageContent />
  </Suspense>
);

export default SuccessPage;

